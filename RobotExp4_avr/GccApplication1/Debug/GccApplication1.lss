
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000011e0  00001274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000016b  0080010a  0080010a  0000127e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000127e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001406  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a84  00000000  00000000  000027fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a88  00000000  00000000  0000327e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  00003d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a0b  00000000  00000000  00004028  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000661  00000000  00000000  00004a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00005094  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ae c0       	rjmp	.+348    	; 0x19e <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	8b c0       	rjmp	.+278    	; 0x160 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 ee       	ldi	r30, 0xE0	; 224
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 30       	cpi	r26, 0x0A	; 10
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	aa e0       	ldi	r26, 0x0A	; 10
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a5 37       	cpi	r26, 0x75	; 117
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	b7 d4       	rcall	.+2414   	; 0xa32 <main>
      c4:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <SetDutyCW>:


//// SetDuty 설정 ////
void SetDutyCW(double v){
   
   while(TCNT1  == 0);
      ca:	2c b5       	in	r18, 0x2c	; 44
      cc:	3d b5       	in	r19, 0x2d	; 45
      ce:	23 2b       	or	r18, r19
      d0:	e1 f3       	breq	.-8      	; 0xca <SetDutyCW>

   int ocr = v * (200. / 24.) + 200;
      d2:	25 e5       	ldi	r18, 0x55	; 85
      d4:	35 e5       	ldi	r19, 0x55	; 85
      d6:	45 e0       	ldi	r20, 0x05	; 5
      d8:	51 e4       	ldi	r21, 0x41	; 65
      da:	0e 94 8b 08 	call	0x1116	; 0x1116 <__mulsf3>
      de:	20 e0       	ldi	r18, 0x00	; 0
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	48 e4       	ldi	r20, 0x48	; 72
      e4:	53 e4       	ldi	r21, 0x43	; 67
      e6:	60 d6       	rcall	.+3264   	; 0xda8 <__addsf3>
      e8:	2f d7       	rcall	.+3678   	; 0xf48 <__fixsfsi>
   
   if(ocr > OCR_MAX)   ocr = OCR_MAX;
      ea:	67 38       	cpi	r22, 0x87	; 135
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	78 07       	cpc	r23, r24
      f0:	34 f4       	brge	.+12     	; 0xfe <SetDutyCW+0x34>
   else if(ocr < OCR_MIN)   ocr = OCR_MIN;
      f2:	6a 30       	cpi	r22, 0x0A	; 10
      f4:	71 05       	cpc	r23, r1
      f6:	2c f4       	brge	.+10     	; 0x102 <SetDutyCW+0x38>
      f8:	6a e0       	ldi	r22, 0x0A	; 10
      fa:	70 e0       	ldi	r23, 0x00	; 0
      fc:	02 c0       	rjmp	.+4      	; 0x102 <SetDutyCW+0x38>
   
   while(TCNT1  == 0);

   int ocr = v * (200. / 24.) + 200;
   
   if(ocr > OCR_MAX)   ocr = OCR_MAX;
      fe:	66 e8       	ldi	r22, 0x86	; 134
     100:	71 e0       	ldi	r23, 0x01	; 1
   else if(ocr < OCR_MIN)   ocr = OCR_MIN;
   //OCR1A = OCR1B = ocr;
   
   OCR1A = OCR3B = ocr + 8;      //1 H
     102:	cb 01       	movw	r24, r22
     104:	08 96       	adiw	r24, 0x08	; 8
     106:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     10a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     10e:	9b bd       	out	0x2b, r25	; 43
     110:	8a bd       	out	0x2a, r24	; 42
   OCR1B = OCR3A = ocr - 8;      //1 L
     112:	68 50       	subi	r22, 0x08	; 8
     114:	71 09       	sbc	r23, r1
     116:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     11a:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     11e:	79 bd       	out	0x29, r23	; 41
     120:	68 bd       	out	0x28, r22	; 40
     122:	08 95       	ret

00000124 <InitLS7366>:
}

//// LS7366  ////
void InitLS7366(){
     124:	cf 93       	push	r28
   
   PORTB = 0x00;
     126:	18 ba       	out	0x18, r1	; 24
   SPI_MasterSend(SELECT_MDR0 | WR_REG);
     128:	88 e8       	ldi	r24, 0x88	; 136
     12a:	33 d6       	rcall	.+3174   	; 0xd92 <SPI_MasterSend>
   SPI_MasterSend(X4_QUAD | FREE_RUN | DISABLE_INDEX | SYNCHRONOUS_INDEX |FILTER_CDF_1);
     12c:	83 e4       	ldi	r24, 0x43	; 67
     12e:	31 d6       	rcall	.+3170   	; 0xd92 <SPI_MasterSend>
   PORTB = 0x01;
     130:	c1 e0       	ldi	r28, 0x01	; 1
     132:	c8 bb       	out	0x18, r28	; 24
   
   PORTB = 0x00;
   SPI_MasterSend(SELECT_MDR1 | WR_REG);
     134:	18 ba       	out	0x18, r1	; 24
     136:	80 e9       	ldi	r24, 0x90	; 144
   SPI_MasterSend(FOUR_BYTE_COUNT_MODE | ENABLE_COUNTING);
     138:	2c d6       	rcall	.+3160   	; 0xd92 <SPI_MasterSend>
     13a:	80 e0       	ldi	r24, 0x00	; 0
   PORTB = 0x01;
     13c:	2a d6       	rcall	.+3156   	; 0xd92 <SPI_MasterSend>
   
   PORTB = 0x00;
     13e:	c8 bb       	out	0x18, r28	; 24
   SPI_MasterSend(SELECT_CNTR | CLR_REG);
     140:	18 ba       	out	0x18, r1	; 24
     142:	80 e2       	ldi	r24, 0x20	; 32
     144:	26 d6       	rcall	.+3148   	; 0xd92 <SPI_MasterSend>
   PORTB = 0x01;
     146:	c8 bb       	out	0x18, r28	; 24
}
     148:	cf 91       	pop	r28
     14a:	08 95       	ret

0000014c <getADC>:


//// ADC 설정 ////
int getADC(char ch){

   ADMUX = (ADMUX & 0xf0) + ch;
     14c:	97 b1       	in	r25, 0x07	; 7
     14e:	90 7f       	andi	r25, 0xF0	; 240
     150:	89 0f       	add	r24, r25
     152:	87 b9       	out	0x07, r24	; 7
   ADCSRA |= 0x40;
     154:	36 9a       	sbi	0x06, 6	; 6
   while(!(ADCSRA & 0x10));
     156:	34 9b       	sbis	0x06, 4	; 6
     158:	fe cf       	rjmp	.-4      	; 0x156 <getADC+0xa>
   return ADC;
     15a:	84 b1       	in	r24, 0x04	; 4
     15c:	95 b1       	in	r25, 0x05	; 5
}
     15e:	08 95       	ret

00000160 <__vector_18>:


ISR(USART0_RX_vect){
     160:	1f 92       	push	r1
     162:	0f 92       	push	r0
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	0f 92       	push	r0
     168:	11 24       	eor	r1, r1
     16a:	0b b6       	in	r0, 0x3b	; 59
     16c:	0f 92       	push	r0
     16e:	8f 93       	push	r24
     170:	ef 93       	push	r30
     172:	ff 93       	push	r31

   g_buf[g_BufWriteCnt++] = UDR0;
     174:	e0 91 54 02 	lds	r30, 0x0254	; 0x800254 <g_BufWriteCnt>
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	8e 0f       	add	r24, r30
     17c:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <g_BufWriteCnt>
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	8c b1       	in	r24, 0x0c	; 12
     184:	e2 5b       	subi	r30, 0xB2	; 178
     186:	fe 4f       	sbci	r31, 0xFE	; 254
     188:	80 83       	st	Z, r24
}
     18a:	ff 91       	pop	r31
     18c:	ef 91       	pop	r30
     18e:	8f 91       	pop	r24
     190:	0f 90       	pop	r0
     192:	0b be       	out	0x3b, r0	; 59
     194:	0f 90       	pop	r0
     196:	0f be       	out	0x3f, r0	; 63
     198:	0f 90       	pop	r0
     19a:	1f 90       	pop	r1
     19c:	18 95       	reti

0000019e <__vector_16>:



//// 제어기는 무조건 여기에 코딩(함수 사용 o) ////

ISR(TIMER0_OVF_vect){
     19e:	1f 92       	push	r1
     1a0:	0f 92       	push	r0
     1a2:	0f b6       	in	r0, 0x3f	; 63
     1a4:	0f 92       	push	r0
     1a6:	11 24       	eor	r1, r1
     1a8:	0b b6       	in	r0, 0x3b	; 59
     1aa:	0f 92       	push	r0
     1ac:	8f 92       	push	r8
     1ae:	9f 92       	push	r9
     1b0:	af 92       	push	r10
     1b2:	bf 92       	push	r11
     1b4:	cf 92       	push	r12
     1b6:	df 92       	push	r13
     1b8:	ef 92       	push	r14
     1ba:	ff 92       	push	r15
     1bc:	2f 93       	push	r18
     1be:	3f 93       	push	r19
     1c0:	4f 93       	push	r20
     1c2:	5f 93       	push	r21
     1c4:	6f 93       	push	r22
     1c6:	7f 93       	push	r23
     1c8:	8f 93       	push	r24
     1ca:	9f 93       	push	r25
     1cc:	af 93       	push	r26
     1ce:	bf 93       	push	r27
     1d0:	cf 93       	push	r28
     1d2:	ef 93       	push	r30
     1d4:	ff 93       	push	r31
         
   TCNT0 = 256 - 125;      //0.5ms    2000HZ
     1d6:	83 e8       	ldi	r24, 0x83	; 131
     1d8:	82 bf       	out	0x32, r24	; 50
   
   //Read LS7366
   int32_t cnt;
   
   PORTC = 0x01;
     1da:	c1 e0       	ldi	r28, 0x01	; 1
     1dc:	c5 bb       	out	0x15, r28	; 21
   
   g_ADC = getADC(0);
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	b5 df       	rcall	.-150    	; 0x14c <getADC>
     1e2:	bc 01       	movw	r22, r24
     1e4:	99 0f       	add	r25, r25
     1e6:	88 0b       	sbc	r24, r24
     1e8:	99 0b       	sbc	r25, r25
     1ea:	e1 d6       	rcall	.+3522   	; 0xfae <__floatsisf>
     1ec:	60 93 6b 02 	sts	0x026B, r22	; 0x80026b <g_ADC>
     1f0:	70 93 6c 02 	sts	0x026C, r23	; 0x80026c <g_ADC+0x1>
     1f4:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <g_ADC+0x2>
     1f8:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <g_ADC+0x3>
   
   PORTB = 0x00;
   SPI_MasterSend(SELECT_OTR | LOAD_REG);
     1fc:	18 ba       	out	0x18, r1	; 24
     1fe:	88 ee       	ldi	r24, 0xE8	; 232
     200:	c8 d5       	rcall	.+2960   	; 0xd92 <SPI_MasterSend>
   PORTB = 0x01;
         
   PORTB = 0x00;
   SPI_MasterSend(SELECT_OTR | RD_REG);
     202:	c8 bb       	out	0x18, r28	; 24
     204:	18 ba       	out	0x18, r1	; 24
     206:	88 e6       	ldi	r24, 0x68	; 104
   cnt = SPI_MasterRecv();      cnt = cnt<< 8;
     208:	c4 d5       	rcall	.+2952   	; 0xd92 <SPI_MasterSend>
     20a:	c8 d5       	rcall	.+2960   	; 0xd9c <SPI_MasterRecv>
     20c:	c8 2e       	mov	r12, r24
     20e:	d1 2c       	mov	r13, r1
     210:	e1 2c       	mov	r14, r1
     212:	f1 2c       	mov	r15, r1
     214:	fe 2c       	mov	r15, r14
     216:	ed 2c       	mov	r14, r13
     218:	dc 2c       	mov	r13, r12
   cnt |= SPI_MasterRecv();   cnt = cnt<< 8;
     21a:	cc 24       	eor	r12, r12
     21c:	bf d5       	rcall	.+2942   	; 0xd9c <SPI_MasterRecv>
     21e:	c8 2a       	or	r12, r24
     220:	fe 2c       	mov	r15, r14
     222:	ed 2c       	mov	r14, r13
     224:	dc 2c       	mov	r13, r12
   cnt |= SPI_MasterRecv();   cnt = cnt<< 8;
     226:	cc 24       	eor	r12, r12
     228:	b9 d5       	rcall	.+2930   	; 0xd9c <SPI_MasterRecv>
     22a:	c8 2a       	or	r12, r24
     22c:	fe 2c       	mov	r15, r14
     22e:	ed 2c       	mov	r14, r13
     230:	dc 2c       	mov	r13, r12
   cnt |= SPI_MasterRecv();
     232:	cc 24       	eor	r12, r12
     234:	b3 d5       	rcall	.+2918   	; 0xd9c <SPI_MasterRecv>
   PORTB = 0x01;
     236:	c8 bb       	out	0x18, r28	; 24
   g_Cnt = -cnt;      //누적 pulse 값 반화
     238:	c8 2a       	or	r12, r24
     23a:	f0 94       	com	r15
     23c:	e0 94       	com	r14
     23e:	d0 94       	com	r13
     240:	c0 94       	com	r12
     242:	c1 1c       	adc	r12, r1
     244:	d1 1c       	adc	r13, r1
     246:	e1 1c       	adc	r14, r1
     248:	f1 1c       	adc	r15, r1
     24a:	c0 92 6f 02 	sts	0x026F, r12	; 0x80026f <g_Cnt>
     24e:	d0 92 70 02 	sts	0x0270, r13	; 0x800270 <g_Cnt+0x1>
     252:	e0 92 71 02 	sts	0x0271, r14	; 0x800271 <g_Cnt+0x2>
     256:	f0 92 72 02 	sts	0x0272, r15	; 0x800272 <g_Cnt+0x3>
   
   PORTC = 0x03;
     25a:	83 e0       	ldi	r24, 0x03	; 3
     25c:	85 bb       	out	0x15, r24	; 21
   
   g_Pcur = (double)(g_Cnt / (4096. * 81.)) * 2 * M_PI;   // 단위 [rad]
     25e:	60 91 6f 02 	lds	r22, 0x026F	; 0x80026f <g_Cnt>
     262:	70 91 70 02 	lds	r23, 0x0270	; 0x800270 <g_Cnt+0x1>
     266:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <g_Cnt+0x2>
     26a:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <g_Cnt+0x3>
     26e:	9f d6       	rcall	.+3390   	; 0xfae <__floatsisf>
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	42 ea       	ldi	r20, 0xA2	; 162
     276:	58 e4       	ldi	r21, 0x48	; 72
     278:	ff d5       	rcall	.+3070   	; 0xe78 <__divsf3>
     27a:	9b 01       	movw	r18, r22
     27c:	ac 01       	movw	r20, r24
     27e:	94 d5       	rcall	.+2856   	; 0xda8 <__addsf3>
     280:	2b ed       	ldi	r18, 0xDB	; 219
     282:	3f e0       	ldi	r19, 0x0F	; 15
     284:	49 e4       	ldi	r20, 0x49	; 73
     286:	50 e4       	ldi	r21, 0x40	; 64
     288:	46 d7       	rcall	.+3724   	; 0x1116 <__mulsf3>
     28a:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <g_Pcur>
     28e:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <g_Pcur+0x1>
     292:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <g_Pcur+0x2>
     296:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <g_Pcur+0x3>
   
   //g_Pcur = (double)(g_Cnt * M_PI / 165888.);
   
   //TO DO
   if((g_TimerCnt % 100) == 0){   //위치제어기      50ms
     29a:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <g_TimerCnt>
     29e:	89 e2       	ldi	r24, 0x29	; 41
     2a0:	98 9f       	mul	r25, r24
     2a2:	81 2d       	mov	r24, r1
     2a4:	11 24       	eor	r1, r1
     2a6:	82 95       	swap	r24
     2a8:	8f 70       	andi	r24, 0x0F	; 15
     2aa:	24 e6       	ldi	r18, 0x64	; 100
     2ac:	82 9f       	mul	r24, r18
     2ae:	90 19       	sub	r25, r0
     2b0:	11 24       	eor	r1, r1
     2b2:	91 11       	cpse	r25, r1
     2b4:	1b c1       	rjmp	.+566    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
      
      g_TimerCnt = 0;
     2b6:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <g_TimerCnt>
      g_Perr = (g_Pdes - g_Pcur); // 위치 에러(오차) = 목표 값 - 현재 값
     2ba:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <g_Pdes>
     2be:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <g_Pdes+0x1>
     2c2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <g_Pdes+0x2>
     2c6:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <g_Pdes+0x3>
     2ca:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <g_Pcur>
     2ce:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <g_Pcur+0x1>
     2d2:	40 91 48 01 	lds	r20, 0x0148	; 0x800148 <g_Pcur+0x2>
     2d6:	50 91 49 01 	lds	r21, 0x0149	; 0x800149 <g_Pcur+0x3>
     2da:	65 d5       	rcall	.+2762   	; 0xda6 <__subsf3>
     2dc:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <g_Perr>
     2e0:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <g_Perr+0x1>
     2e4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <g_Perr+0x2>
     2e8:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <g_Perr+0x3>
      
      g_Perr_det = (g_Perr - g_Perr_old)/dt_position; // 
     2ec:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <g_Perr>
     2f0:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <g_Perr+0x1>
     2f4:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <g_Perr+0x2>
     2f8:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <g_Perr+0x3>
     2fc:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <g_Perr_old>
     300:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <g_Perr_old+0x1>
     304:	40 91 3c 01 	lds	r20, 0x013C	; 0x80013c <g_Perr_old+0x2>
     308:	50 91 3d 01 	lds	r21, 0x013D	; 0x80013d <g_Perr_old+0x3>
     30c:	4c d5       	rcall	.+2712   	; 0xda6 <__subsf3>
     30e:	2d ec       	ldi	r18, 0xCD	; 205
     310:	3c ec       	ldi	r19, 0xCC	; 204
     312:	4c e4       	ldi	r20, 0x4C	; 76
     314:	5d e3       	ldi	r21, 0x3D	; 61
     316:	b0 d5       	rcall	.+2912   	; 0xe78 <__divsf3>
     318:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <g_Perr_det>
     31c:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <g_Perr_det+0x1>
     320:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <g_Perr_det+0x2>
     324:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <g_Perr_det+0x3>
      g_Perr_old = g_Perr;   // 이전 값 저장
     328:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <g_Perr>
     32c:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <g_Perr+0x1>
     330:	a0 91 40 01 	lds	r26, 0x0140	; 0x800140 <g_Perr+0x2>
     334:	b0 91 41 01 	lds	r27, 0x0141	; 0x800141 <g_Perr+0x3>
     338:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <g_Perr_old>
     33c:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <g_Perr_old+0x1>
     340:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <g_Perr_old+0x2>
     344:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <g_Perr_old+0x3>
      
      g_pos_control = g_Perr*Kpp + g_Perr_det*Kdp; 
     348:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <g_Perr>
     34c:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <g_Perr+0x1>
     350:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <g_Perr+0x2>
     354:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <g_Perr+0x3>
     358:	80 90 36 01 	lds	r8, 0x0136	; 0x800136 <g_Perr_det>
     35c:	90 90 37 01 	lds	r9, 0x0137	; 0x800137 <g_Perr_det+0x1>
     360:	a0 90 38 01 	lds	r10, 0x0138	; 0x800138 <g_Perr_det+0x2>
     364:	b0 90 39 01 	lds	r11, 0x0139	; 0x800139 <g_Perr_det+0x3>
     368:	29 ef       	ldi	r18, 0xF9	; 249
     36a:	3f e0       	ldi	r19, 0x0F	; 15
     36c:	49 e4       	ldi	r20, 0x49	; 73
     36e:	51 e4       	ldi	r21, 0x41	; 65
     370:	d2 d6       	rcall	.+3492   	; 0x1116 <__mulsf3>
     372:	6b 01       	movw	r12, r22
     374:	7c 01       	movw	r14, r24
     376:	2d ec       	ldi	r18, 0xCD	; 205
     378:	3c ec       	ldi	r19, 0xCC	; 204
     37a:	4c ec       	ldi	r20, 0xCC	; 204
     37c:	5d e3       	ldi	r21, 0x3D	; 61
     37e:	c5 01       	movw	r24, r10
     380:	b4 01       	movw	r22, r8
     382:	c9 d6       	rcall	.+3474   	; 0x1116 <__mulsf3>
     384:	9b 01       	movw	r18, r22
     386:	ac 01       	movw	r20, r24
     388:	c7 01       	movw	r24, r14
     38a:	b6 01       	movw	r22, r12
     38c:	0d d5       	rcall	.+2586   	; 0xda8 <__addsf3>
     38e:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__data_end>
     392:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <__data_end+0x1>
     396:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end+0x2>
     39a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x3>
      // g_Vlimit = 2, g_pos_control = -1,
      
      //g_Vlimit = -1, g_pos_control = -2 일때, case 3 g_pos = -1
      // g_Vlimit = -2 g_pos_control = -1
      
      if(g_Vlimit >= 0) // 움직여야할 속도가 양수 일 때
     39e:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <g_Vlimit>
     3a2:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <g_Vlimit+0x1>
     3a6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_Vlimit+0x2>
     3aa:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_Vlimit+0x3>
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	a9 01       	movw	r20, r18
     3b4:	ac d6       	rcall	.+3416   	; 0x110e <__gesf2>
     3b6:	88 23       	and	r24, r24
     3b8:	0c f4       	brge	.+2      	; 0x3bc <__vector_16+0x21e>
      {
         if(g_pos_control >= g_Vlimit)  // 움직이는 값이 속도보다 크면,
     3ba:	4d c0       	rjmp	.+154    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     3bc:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__data_end>
     3c0:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <__data_end+0x1>
     3c4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end+0x2>
     3c8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x3>
     3cc:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <g_Vlimit>
     3d0:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <g_Vlimit+0x1>
     3d4:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <g_Vlimit+0x2>
     3d8:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <g_Vlimit+0x3>
     3dc:	98 d6       	rcall	.+3376   	; 0x110e <__gesf2>
     3de:	88 23       	and	r24, r24
     3e0:	8c f0       	brlt	.+34     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
         {
            
            g_pos_control = g_Vlimit; // 속도 값 업데이트 // case1
     3e2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_Vlimit>
     3e6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <g_Vlimit+0x1>
     3ea:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <g_Vlimit+0x2>
     3ee:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <g_Vlimit+0x3>
     3f2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
     3f6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     3fa:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
     3fe:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
            
         }
         else if(g_pos_control <= -1*g_Vlimit) // 만약 -1 곱한 값 보다 작으면
     402:	74 c0       	rjmp	.+232    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     404:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_Vlimit>
     408:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <g_Vlimit+0x1>
     40c:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <g_Vlimit+0x2>
     410:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <g_Vlimit+0x3>
     414:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
     418:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__data_end+0x1>
     41c:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <__data_end+0x2>
     420:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <__data_end+0x3>
     424:	bc 01       	movw	r22, r24
     426:	cd 01       	movw	r24, r26
     428:	90 58       	subi	r25, 0x80	; 128
     42a:	71 d6       	rcall	.+3298   	; 0x110e <__gesf2>
     42c:	88 23       	and	r24, r24
     42e:	0c f4       	brge	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     430:	5d c0       	rjmp	.+186    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
         {
            g_pos_control = -1*g_Vlimit; // case 2
     432:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_Vlimit>
     436:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <g_Vlimit+0x1>
     43a:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <g_Vlimit+0x2>
     43e:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <g_Vlimit+0x3>
     442:	b0 58       	subi	r27, 0x80	; 128
     444:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
     448:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     44c:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
     450:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
         }
         
      }
      else // g_Vlimit < 0
      {
         if(g_pos_control <= g_Vlimit)
     454:	4b c0       	rjmp	.+150    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     456:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__data_end>
     45a:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <__data_end+0x1>
     45e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end+0x2>
     462:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x3>
     466:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <g_Vlimit>
     46a:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <g_Vlimit+0x1>
     46e:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <g_Vlimit+0x2>
     472:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <g_Vlimit+0x3>
     476:	fc d4       	rcall	.+2552   	; 0xe70 <__cmpsf2>
     478:	18 16       	cp	r1, r24
     47a:	8c f0       	brlt	.+34     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
         {
            g_pos_control = g_Vlimit; //case3
     47c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_Vlimit>
     480:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <g_Vlimit+0x1>
     484:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <g_Vlimit+0x2>
     488:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <g_Vlimit+0x3>
     48c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
     490:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     494:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
     498:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
         }
         else if(g_pos_control >= -1*g_Vlimit)
     49c:	27 c0       	rjmp	.+78     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     49e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_Vlimit>
     4a2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <g_Vlimit+0x1>
     4a6:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <g_Vlimit+0x2>
     4aa:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <g_Vlimit+0x3>
     4ae:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
     4b2:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__data_end+0x1>
     4b6:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <__data_end+0x2>
     4ba:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <__data_end+0x3>
     4be:	bc 01       	movw	r22, r24
     4c0:	cd 01       	movw	r24, r26
     4c2:	90 58       	subi	r25, 0x80	; 128
     4c4:	d5 d4       	rcall	.+2474   	; 0xe70 <__cmpsf2>
     4c6:	18 16       	cp	r1, r24
     4c8:	8c f0       	brlt	.+34     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
         {
            g_pos_control = -1*g_Vlimit; //case4
     4ca:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_Vlimit>
     4ce:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <g_Vlimit+0x1>
     4d2:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <g_Vlimit+0x2>
     4d6:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <g_Vlimit+0x3>
     4da:	b0 58       	subi	r27, 0x80	; 128
     4dc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
     4e0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     4e4:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
     4e8:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
      }
      
   }
   //속도 제어기 ----------------------------------------------------

   if((g_TimerCnt % 10) == 0)      
     4ec:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <g_TimerCnt>
     4f0:	8d ec       	ldi	r24, 0xCD	; 205
     4f2:	28 9f       	mul	r18, r24
     4f4:	81 2d       	mov	r24, r1
     4f6:	11 24       	eor	r1, r1
     4f8:	86 95       	lsr	r24
     4fa:	86 95       	lsr	r24
     4fc:	86 95       	lsr	r24
     4fe:	88 0f       	add	r24, r24
     500:	98 2f       	mov	r25, r24
     502:	99 0f       	add	r25, r25
     504:	99 0f       	add	r25, r25
     506:	89 0f       	add	r24, r25
   {
      
      g_Vcur = (double)(g_Pcur - g_Pre_Pcur) / 0.005;      // 차이를 시간으로 나눔
     508:	28 13       	cpse	r18, r24
     50a:	43 c1       	rjmp	.+646    	; 0x792 <__LOCK_REGION_LENGTH__+0x392>
     50c:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <g_Pcur>
     510:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <g_Pcur+0x1>
     514:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <g_Pcur+0x2>
     518:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <g_Pcur+0x3>
     51c:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <g_Pre_Pcur>
     520:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <g_Pre_Pcur+0x1>
     524:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <g_Pre_Pcur+0x2>
     528:	50 91 45 01 	lds	r21, 0x0145	; 0x800145 <g_Pre_Pcur+0x3>
     52c:	3c d4       	rcall	.+2168   	; 0xda6 <__subsf3>
     52e:	2a e0       	ldi	r18, 0x0A	; 10
     530:	37 ed       	ldi	r19, 0xD7	; 215
     532:	43 ea       	ldi	r20, 0xA3	; 163
     534:	5b e3       	ldi	r21, 0x3B	; 59
     536:	a0 d4       	rcall	.+2368   	; 0xe78 <__divsf3>
     538:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <g_Vcur>
     53c:	70 93 33 01 	sts	0x0133, r23	; 0x800133 <g_Vcur+0x1>
     540:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <g_Vcur+0x2>
     544:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <g_Vcur+0x3>
      g_Pre_Pcur = (double)g_Pcur;   //위치 이전 값 저장
     548:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <g_Pcur>
     54c:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <g_Pcur+0x1>
     550:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <g_Pcur+0x2>
     554:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <g_Pcur+0x3>
     558:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <g_Pre_Pcur>
     55c:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <g_Pre_Pcur+0x1>
     560:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <g_Pre_Pcur+0x2>
     564:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <g_Pre_Pcur+0x3>
      
      g_Vdes = g_pos_control;   // 속도 목표값 설정 -> 위치 제어기에서 받아옴
     568:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     56c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
     570:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__data_end+0x2>
     574:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__data_end+0x3>
     578:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <g_Vdes>
     57c:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <g_Vdes+0x1>
     580:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <g_Vdes+0x2>
     584:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <g_Vdes+0x3>

      
      
      
      g_Verr = (double)(g_Vdes - g_Vcur);   // 속도 에러값
     588:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <g_Vdes>
     58c:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <g_Vdes+0x1>
     590:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_Vdes+0x2>
     594:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <g_Vdes+0x3>
     598:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <g_Vcur>
     59c:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <g_Vcur+0x1>
     5a0:	40 91 34 01 	lds	r20, 0x0134	; 0x800134 <g_Vcur+0x2>
     5a4:	50 91 35 01 	lds	r21, 0x0135	; 0x800135 <g_Vcur+0x3>
     5a8:	fe d3       	rcall	.+2044   	; 0xda6 <__subsf3>
     5aa:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <g_Verr>
     5ae:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <g_Verr+0x1>
     5b2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <g_Verr+0x2>
     5b6:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <g_Verr+0x3>
      g_Verr_sum += (double)g_Verr;         // 속도 에러값 누적하여 저장 -> I제어를 위해 저장
     5ba:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <g_Verr>
     5be:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <g_Verr+0x1>
     5c2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <g_Verr+0x2>
     5c6:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <g_Verr+0x3>
     5ca:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <g_Verr_sum>
     5ce:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <g_Verr_sum+0x1>
     5d2:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <g_Verr_sum+0x2>
     5d6:	50 91 29 01 	lds	r21, 0x0129	; 0x800129 <g_Verr_sum+0x3>
     5da:	e6 d3       	rcall	.+1996   	; 0xda8 <__addsf3>
     5dc:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <g_Verr_sum>
     5e0:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <g_Verr_sum+0x1>
     5e4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <g_Verr_sum+0x2>
      
      g_vel_control = (double)(g_Verr * Kps + g_Verr_sum* Kis*dt_velocity); // PI제어
     5e8:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <g_Verr_sum+0x3>
     5ec:	80 90 2a 01 	lds	r8, 0x012A	; 0x80012a <g_Verr>
     5f0:	90 90 2b 01 	lds	r9, 0x012B	; 0x80012b <g_Verr+0x1>
     5f4:	a0 90 2c 01 	lds	r10, 0x012C	; 0x80012c <g_Verr+0x2>
     5f8:	b0 90 2d 01 	lds	r11, 0x012D	; 0x80012d <g_Verr+0x3>
     5fc:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <g_Verr_sum>
     600:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <g_Verr_sum+0x1>
     604:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <g_Verr_sum+0x2>
     608:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <g_Verr_sum+0x3>
     60c:	21 e7       	ldi	r18, 0x71	; 113
     60e:	3b ec       	ldi	r19, 0xCB	; 203
     610:	4e e2       	ldi	r20, 0x2E	; 46
     612:	54 e4       	ldi	r21, 0x44	; 68
     614:	80 d5       	rcall	.+2816   	; 0x1116 <__mulsf3>
     616:	2a e0       	ldi	r18, 0x0A	; 10
     618:	37 ed       	ldi	r19, 0xD7	; 215
     61a:	43 ea       	ldi	r20, 0xA3	; 163
     61c:	5b e3       	ldi	r21, 0x3B	; 59
     61e:	7b d5       	rcall	.+2806   	; 0x1116 <__mulsf3>
     620:	6b 01       	movw	r12, r22
     622:	7c 01       	movw	r14, r24
     624:	26 ee       	ldi	r18, 0xE6	; 230
     626:	3f e3       	ldi	r19, 0x3F	; 63
     628:	48 e2       	ldi	r20, 0x28	; 40
     62a:	50 e4       	ldi	r21, 0x40	; 64
     62c:	c5 01       	movw	r24, r10
     62e:	b4 01       	movw	r22, r8
     630:	72 d5       	rcall	.+2788   	; 0x1116 <__mulsf3>
     632:	9b 01       	movw	r18, r22
     634:	ac 01       	movw	r20, r24
     636:	c7 01       	movw	r24, r14
     638:	b6 01       	movw	r22, r12
     63a:	b6 d3       	rcall	.+1900   	; 0xda8 <__addsf3>
     63c:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <g_vel_control>
     640:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <g_vel_control+0x1>
     644:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_vel_control+0x2>
     648:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_vel_control+0x3>
      
     // 속도 제어기 Anti - windup
      if(g_vel_control >= g_Climit)               
     64c:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <g_vel_control>
     650:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <g_vel_control+0x1>
     654:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_vel_control+0x2>
     658:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_vel_control+0x3>
     65c:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <g_Climit>
     660:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <g_Climit+0x1>
     664:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <g_Climit+0x2>
     668:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <g_Climit+0x3>
     66c:	50 d5       	rcall	.+2720   	; 0x110e <__gesf2>
     66e:	88 23       	and	r24, r24
      {
         g_Verr_sum -= (double)((g_vel_control - g_Climit)*Kas);      // 누적오차 조정
     670:	0c f4       	brge	.+2      	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
     672:	3c c0       	rjmp	.+120    	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
     674:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <g_vel_control>
     678:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <g_vel_control+0x1>
     67c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_vel_control+0x2>
     680:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_vel_control+0x3>
     684:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <g_Climit>
     688:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <g_Climit+0x1>
     68c:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <g_Climit+0x2>
     690:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <g_Climit+0x3>
     694:	c0 90 26 01 	lds	r12, 0x0126	; 0x800126 <g_Verr_sum>
     698:	d0 90 27 01 	lds	r13, 0x0127	; 0x800127 <g_Verr_sum+0x1>
     69c:	e0 90 28 01 	lds	r14, 0x0128	; 0x800128 <g_Verr_sum+0x2>
     6a0:	f0 90 29 01 	lds	r15, 0x0129	; 0x800129 <g_Verr_sum+0x3>
     6a4:	80 d3       	rcall	.+1792   	; 0xda6 <__subsf3>
     6a6:	2a ec       	ldi	r18, 0xCA	; 202
     6a8:	33 ec       	ldi	r19, 0xC3	; 195
     6aa:	42 ec       	ldi	r20, 0xC2	; 194
     6ac:	5e e3       	ldi	r21, 0x3E	; 62
     6ae:	33 d5       	rcall	.+2662   	; 0x1116 <__mulsf3>
     6b0:	9b 01       	movw	r18, r22
     6b2:	ac 01       	movw	r20, r24
     6b4:	c7 01       	movw	r24, r14
     6b6:	b6 01       	movw	r22, r12
     6b8:	76 d3       	rcall	.+1772   	; 0xda6 <__subsf3>
     6ba:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <g_Verr_sum>
     6be:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <g_Verr_sum+0x1>
     6c2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <g_Verr_sum+0x2>
     6c6:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <g_Verr_sum+0x3>
         g_vel_control = g_Climit;                              // 상한값으로 조정
     6ca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <g_Climit>
     6ce:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <g_Climit+0x1>
     6d2:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <g_Climit+0x2>
     6d6:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <g_Climit+0x3>
     6da:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <g_vel_control>
     6de:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <g_vel_control+0x1>
     6e2:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <g_vel_control+0x2>
     6e6:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <g_vel_control+0x3>
         
      }else if(g_vel_control <= -g_Climit)
     6ea:	53 c0       	rjmp	.+166    	; 0x792 <__LOCK_REGION_LENGTH__+0x392>
     6ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <g_Climit>
     6f0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <g_Climit+0x1>
     6f4:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <g_Climit+0x2>
     6f8:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <g_Climit+0x3>
     6fc:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <g_vel_control>
     700:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <g_vel_control+0x1>
     704:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <g_vel_control+0x2>
     708:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <g_vel_control+0x3>
     70c:	bc 01       	movw	r22, r24
     70e:	cd 01       	movw	r24, r26
     710:	90 58       	subi	r25, 0x80	; 128
     712:	fd d4       	rcall	.+2554   	; 0x110e <__gesf2>
     714:	88 23       	and	r24, r24
      {
         g_Verr_sum -= (double)((g_vel_control + g_Climit)*Kas);      // 누적오차 조정
     716:	0c f4       	brge	.+2      	; 0x71a <__LOCK_REGION_LENGTH__+0x31a>
     718:	3c c0       	rjmp	.+120    	; 0x792 <__LOCK_REGION_LENGTH__+0x392>
     71a:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <g_vel_control>
     71e:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <g_vel_control+0x1>
     722:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_vel_control+0x2>
     726:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_vel_control+0x3>
     72a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <g_Climit>
     72e:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <g_Climit+0x1>
     732:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <g_Climit+0x2>
     736:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <g_Climit+0x3>
     73a:	c0 90 26 01 	lds	r12, 0x0126	; 0x800126 <g_Verr_sum>
     73e:	d0 90 27 01 	lds	r13, 0x0127	; 0x800127 <g_Verr_sum+0x1>
     742:	e0 90 28 01 	lds	r14, 0x0128	; 0x800128 <g_Verr_sum+0x2>
     746:	f0 90 29 01 	lds	r15, 0x0129	; 0x800129 <g_Verr_sum+0x3>
     74a:	2e d3       	rcall	.+1628   	; 0xda8 <__addsf3>
     74c:	2a ec       	ldi	r18, 0xCA	; 202
     74e:	33 ec       	ldi	r19, 0xC3	; 195
     750:	42 ec       	ldi	r20, 0xC2	; 194
     752:	5e e3       	ldi	r21, 0x3E	; 62
     754:	e0 d4       	rcall	.+2496   	; 0x1116 <__mulsf3>
     756:	9b 01       	movw	r18, r22
     758:	ac 01       	movw	r20, r24
     75a:	c7 01       	movw	r24, r14
     75c:	b6 01       	movw	r22, r12
     75e:	23 d3       	rcall	.+1606   	; 0xda6 <__subsf3>
     760:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <g_Verr_sum>
     764:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <g_Verr_sum+0x1>
     768:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <g_Verr_sum+0x2>
     76c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <g_Verr_sum+0x3>
     770:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <g_Climit>
         g_vel_control = -g_Climit;                              // 하한값으로 조정
     774:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <g_Climit+0x1>
     778:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <g_Climit+0x2>
     77c:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <g_Climit+0x3>
     780:	b0 58       	subi	r27, 0x80	; 128
     782:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <g_vel_control>
     786:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <g_vel_control+0x1>
     78a:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <g_vel_control+0x2>
     78e:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <g_vel_control+0x3>
      }*/
      
   }
   
   
   g_TimerCnt++;
     792:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <g_TimerCnt>
     796:	8f 5f       	subi	r24, 0xFF	; 255
     798:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <g_TimerCnt>
   //전류제어기 --------------------------------------------------------------------
   //0.5ms
   
   //g_Cdes = -0.2;   // 0.1을 0.2로
   
   g_Cdes = g_vel_control;      //속도 제어기 출력
     79c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <g_vel_control>
     7a0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <g_vel_control+0x1>
     7a4:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <g_vel_control+0x2>
     7a8:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <g_vel_control+0x3>
     7ac:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_Cdes>
     7b0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_Cdes+0x1>
     7b4:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <g_Cdes+0x2>

   g_Ccur = -( ((g_ADC / 1024. * 5.) - 2.5) * 10.);   //아날로그-디지털 변환 -> 실제 전류값 스케일링
     7b8:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <g_Cdes+0x3>
     7bc:	60 91 6b 02 	lds	r22, 0x026B	; 0x80026b <g_ADC>
     7c0:	70 91 6c 02 	lds	r23, 0x026C	; 0x80026c <g_ADC+0x1>
     7c4:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <g_ADC+0x2>
     7c8:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <g_ADC+0x3>
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	40 e8       	ldi	r20, 0x80	; 128
     7d2:	5a e3       	ldi	r21, 0x3A	; 58
     7d4:	a0 d4       	rcall	.+2368   	; 0x1116 <__mulsf3>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 ea       	ldi	r20, 0xA0	; 160
     7dc:	50 e4       	ldi	r21, 0x40	; 64
     7de:	9b d4       	rcall	.+2358   	; 0x1116 <__mulsf3>
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	40 e2       	ldi	r20, 0x20	; 32
     7e6:	50 e4       	ldi	r21, 0x40	; 64
     7e8:	de d2       	rcall	.+1468   	; 0xda6 <__subsf3>
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	40 e2       	ldi	r20, 0x20	; 32
     7f0:	51 e4       	ldi	r21, 0x41	; 65
     7f2:	91 d4       	rcall	.+2338   	; 0x1116 <__mulsf3>
     7f4:	dc 01       	movw	r26, r24
     7f6:	cb 01       	movw	r24, r22
     7f8:	b0 58       	subi	r27, 0x80	; 128
     7fa:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <g_Ccur>
     7fe:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <g_Ccur+0x1>
     802:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <g_Ccur+0x2>
     806:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <g_Ccur+0x3>
   g_Cerr = (double)(g_Cdes - g_Ccur); //전류 오차값
     80a:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <g_Cdes>
     80e:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <g_Cdes+0x1>
     812:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_Cdes+0x2>
     816:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <g_Cdes+0x3>
     81a:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <g_Ccur>
     81e:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <g_Ccur+0x1>
     822:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <g_Ccur+0x2>
     826:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <g_Ccur+0x3>
     82a:	bd d2       	rcall	.+1402   	; 0xda6 <__subsf3>
     82c:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <g_Cerr>
     830:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <g_Cerr+0x1>
     834:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_Cerr+0x2>
     838:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_Cerr+0x3>
     83c:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <g_Cerr>
   
   g_Cerr_sum += (double)g_Cerr; //전류 오차 저장
     840:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <g_Cerr+0x1>
     844:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_Cerr+0x2>
     848:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <g_Cerr+0x3>
     84c:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <g_Cerr_sum>
     850:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <g_Cerr_sum+0x1>
     854:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <g_Cerr_sum+0x2>
     858:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <g_Cerr_sum+0x3>
     85c:	a5 d2       	rcall	.+1354   	; 0xda8 <__addsf3>
     85e:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <g_Cerr_sum>
     862:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <g_Cerr_sum+0x1>
     866:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_Cerr_sum+0x2>
   


   g_cur_control = (double)(g_Cerr * Kpc + g_Cerr_sum * Kic* dt_current);   //PI 제어 식
     86a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <g_Cerr_sum+0x3>
     86e:	80 90 1a 01 	lds	r8, 0x011A	; 0x80011a <g_Cerr>
     872:	90 90 1b 01 	lds	r9, 0x011B	; 0x80011b <g_Cerr+0x1>
     876:	a0 90 1c 01 	lds	r10, 0x011C	; 0x80011c <g_Cerr+0x2>
     87a:	b0 90 1d 01 	lds	r11, 0x011D	; 0x80011d <g_Cerr+0x3>
     87e:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <g_Cerr_sum>
     882:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <g_Cerr_sum+0x1>
     886:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_Cerr_sum+0x2>
     88a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <g_Cerr_sum+0x3>
     88e:	23 e3       	ldi	r18, 0x33	; 51
     890:	3b e3       	ldi	r19, 0x3B	; 59
     892:	4a e0       	ldi	r20, 0x0A	; 10
     894:	55 e4       	ldi	r21, 0x45	; 69
     896:	3f d4       	rcall	.+2174   	; 0x1116 <__mulsf3>
     898:	2f e6       	ldi	r18, 0x6F	; 111
     89a:	32 e1       	ldi	r19, 0x12	; 18
     89c:	43 e0       	ldi	r20, 0x03	; 3
     89e:	5a e3       	ldi	r21, 0x3A	; 58
     8a0:	3a d4       	rcall	.+2164   	; 0x1116 <__mulsf3>
     8a2:	6b 01       	movw	r12, r22
     8a4:	7c 01       	movw	r14, r24
     8a6:	28 eb       	ldi	r18, 0xB8	; 184
     8a8:	3f ea       	ldi	r19, 0xAF	; 175
     8aa:	43 e5       	ldi	r20, 0x53	; 83
     8ac:	5f e3       	ldi	r21, 0x3F	; 63
     8ae:	c5 01       	movw	r24, r10
     8b0:	b4 01       	movw	r22, r8
     8b2:	31 d4       	rcall	.+2146   	; 0x1116 <__mulsf3>
     8b4:	9b 01       	movw	r18, r22
     8b6:	ac 01       	movw	r20, r24
     8b8:	c7 01       	movw	r24, r14
     8ba:	b6 01       	movw	r22, r12
     8bc:	75 d2       	rcall	.+1258   	; 0xda8 <__addsf3>
     8be:	44 d3       	rcall	.+1672   	; 0xf48 <__fixsfsi>
     8c0:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <g_cur_control+0x1>
   
   g_cur_control += (double)(g_Vcur * Kt); //역기전력 보상
     8c4:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <g_cur_control>
     8c8:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <g_Vcur>
     8cc:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <g_Vcur+0x1>
     8d0:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <g_Vcur+0x2>
     8d4:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <g_Vcur+0x3>
     8d8:	e0 90 12 01 	lds	r14, 0x0112	; 0x800112 <g_cur_control>
     8dc:	f0 90 13 01 	lds	r15, 0x0113	; 0x800113 <g_cur_control+0x1>
     8e0:	2f ed       	ldi	r18, 0xDF	; 223
     8e2:	30 ee       	ldi	r19, 0xE0	; 224
     8e4:	4b e8       	ldi	r20, 0x8B	; 139
     8e6:	5d e3       	ldi	r21, 0x3D	; 61
     8e8:	16 d4       	rcall	.+2092   	; 0x1116 <__mulsf3>
     8ea:	4b 01       	movw	r8, r22
     8ec:	5c 01       	movw	r10, r24
     8ee:	b7 01       	movw	r22, r14
     8f0:	ff 0c       	add	r15, r15
     8f2:	88 0b       	sbc	r24, r24
     8f4:	99 0b       	sbc	r25, r25
     8f6:	5b d3       	rcall	.+1718   	; 0xfae <__floatsisf>
     8f8:	9b 01       	movw	r18, r22
     8fa:	ac 01       	movw	r20, r24
     8fc:	c5 01       	movw	r24, r10
     8fe:	b4 01       	movw	r22, r8
     900:	53 d2       	rcall	.+1190   	; 0xda8 <__addsf3>
     902:	22 d3       	rcall	.+1604   	; 0xf48 <__fixsfsi>
     904:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <g_cur_control+0x1>
     908:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <g_cur_control>
   
   //전류제어기 Antiwind up -> +- 24V 내로 제한
   if(g_cur_control >= 24)
     90c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_cur_control>
     910:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_cur_control+0x1>
     914:	48 97       	sbiw	r24, 0x18	; 24
   {
      g_Cerr_sum -= (double)(g_cur_control - 24)*Kac;      // 누적오차 조정
     916:	64 f1       	brlt	.+88     	; 0x970 <__LOCK_REGION_LENGTH__+0x570>
     918:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <g_cur_control>
     91c:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <g_cur_control+0x1>
     920:	c0 90 16 01 	lds	r12, 0x0116	; 0x800116 <g_Cerr_sum>
     924:	d0 90 17 01 	lds	r13, 0x0117	; 0x800117 <g_Cerr_sum+0x1>
     928:	e0 90 18 01 	lds	r14, 0x0118	; 0x800118 <g_Cerr_sum+0x2>
     92c:	f0 90 19 01 	lds	r15, 0x0119	; 0x800119 <g_Cerr_sum+0x3>
     930:	68 51       	subi	r22, 0x18	; 24
     932:	71 09       	sbc	r23, r1
     934:	07 2e       	mov	r0, r23
     936:	00 0c       	add	r0, r0
     938:	88 0b       	sbc	r24, r24
     93a:	99 0b       	sbc	r25, r25
     93c:	38 d3       	rcall	.+1648   	; 0xfae <__floatsisf>
     93e:	2f e9       	ldi	r18, 0x9F	; 159
     940:	3d ec       	ldi	r19, 0xCD	; 205
     942:	4a e9       	ldi	r20, 0x9A	; 154
     944:	5f e3       	ldi	r21, 0x3F	; 63
     946:	e7 d3       	rcall	.+1998   	; 0x1116 <__mulsf3>
     948:	9b 01       	movw	r18, r22
     94a:	ac 01       	movw	r20, r24
     94c:	c7 01       	movw	r24, r14
     94e:	b6 01       	movw	r22, r12
     950:	2a d2       	rcall	.+1108   	; 0xda6 <__subsf3>
     952:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <g_Cerr_sum>
     956:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <g_Cerr_sum+0x1>
     95a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_Cerr_sum+0x2>
     95e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <g_Cerr_sum+0x3>
      g_cur_control = 24.;                           // 상한값으로 설정
     962:	88 e1       	ldi	r24, 0x18	; 24
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_cur_control+0x1>
     96a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_cur_control>
   }
   else if(g_cur_control <= -24)
     96e:	32 c0       	rjmp	.+100    	; 0x9d4 <__LOCK_REGION_LENGTH__+0x5d4>
     970:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_cur_control>
     974:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_cur_control+0x1>
   {
      
      g_Cerr_sum -= (double)(g_cur_control + 24)*Kac;      // 누적 오차 조정
     978:	89 3e       	cpi	r24, 0xE9	; 233
     97a:	9f 4f       	sbci	r25, 0xFF	; 255
     97c:	5c f5       	brge	.+86     	; 0x9d4 <__LOCK_REGION_LENGTH__+0x5d4>
     97e:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <g_cur_control>
     982:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <g_cur_control+0x1>
     986:	c0 90 16 01 	lds	r12, 0x0116	; 0x800116 <g_Cerr_sum>
     98a:	d0 90 17 01 	lds	r13, 0x0117	; 0x800117 <g_Cerr_sum+0x1>
     98e:	e0 90 18 01 	lds	r14, 0x0118	; 0x800118 <g_Cerr_sum+0x2>
     992:	f0 90 19 01 	lds	r15, 0x0119	; 0x800119 <g_Cerr_sum+0x3>
     996:	68 5e       	subi	r22, 0xE8	; 232
     998:	7f 4f       	sbci	r23, 0xFF	; 255
     99a:	07 2e       	mov	r0, r23
     99c:	00 0c       	add	r0, r0
     99e:	88 0b       	sbc	r24, r24
     9a0:	99 0b       	sbc	r25, r25
     9a2:	05 d3       	rcall	.+1546   	; 0xfae <__floatsisf>
     9a4:	2f e9       	ldi	r18, 0x9F	; 159
     9a6:	3d ec       	ldi	r19, 0xCD	; 205
     9a8:	4a e9       	ldi	r20, 0x9A	; 154
     9aa:	5f e3       	ldi	r21, 0x3F	; 63
     9ac:	b4 d3       	rcall	.+1896   	; 0x1116 <__mulsf3>
     9ae:	9b 01       	movw	r18, r22
     9b0:	ac 01       	movw	r20, r24
     9b2:	c7 01       	movw	r24, r14
     9b4:	b6 01       	movw	r22, r12
     9b6:	f7 d1       	rcall	.+1006   	; 0xda6 <__subsf3>
     9b8:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <g_Cerr_sum>
     9bc:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <g_Cerr_sum+0x1>
     9c0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_Cerr_sum+0x2>
     9c4:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <g_Cerr_sum+0x3>
      g_cur_control = -24.;                           // 하한값으로 설정
     9c8:	88 ee       	ldi	r24, 0xE8	; 232
     9ca:	9f ef       	ldi	r25, 0xFF	; 255
     9cc:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_cur_control+0x1>
     9d0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_cur_control>
   
   //---------------------------------------------------------------------
   
   
   
   SetDutyCW(g_cur_control);      //duty비 설정
     9d4:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <g_cur_control>
     9d8:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <g_cur_control+0x1>
     9dc:	07 2e       	mov	r0, r23
     9de:	00 0c       	add	r0, r0
     9e0:	88 0b       	sbc	r24, r24
     9e2:	99 0b       	sbc	r25, r25
     9e4:	e4 d2       	rcall	.+1480   	; 0xfae <__floatsisf>
     9e6:	71 db       	rcall	.-2334   	; 0xca <SetDutyCW>
     9e8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_SendFlag>
   
   
   /////////////////////////////////////////
   
   g_SendFlag++;
     9ec:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <g_SendFlag+0x1>
     9f0:	01 96       	adiw	r24, 0x01	; 1
     9f2:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_SendFlag+0x1>
     9f6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_SendFlag>
     9fa:	ff 91       	pop	r31
     9fc:	ef 91       	pop	r30

}
     9fe:	cf 91       	pop	r28
     a00:	bf 91       	pop	r27
     a02:	af 91       	pop	r26
     a04:	9f 91       	pop	r25
     a06:	8f 91       	pop	r24
     a08:	7f 91       	pop	r23
     a0a:	6f 91       	pop	r22
     a0c:	5f 91       	pop	r21
     a0e:	4f 91       	pop	r20
     a10:	3f 91       	pop	r19
     a12:	2f 91       	pop	r18
     a14:	ff 90       	pop	r15
     a16:	ef 90       	pop	r14
     a18:	df 90       	pop	r13
     a1a:	cf 90       	pop	r12
     a1c:	bf 90       	pop	r11
     a1e:	af 90       	pop	r10
     a20:	9f 90       	pop	r9
     a22:	8f 90       	pop	r8
     a24:	0f 90       	pop	r0
     a26:	0b be       	out	0x3b, r0	; 59
     a28:	0f 90       	pop	r0
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	0f 90       	pop	r0
     a2e:	1f 90       	pop	r1
     a30:	18 95       	reti

00000a32 <main>:
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29



int main(void){
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
     a3a:	64 97       	sbiw	r28, 0x14	; 20
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	de bf       	out	0x3e, r29	; 62
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	cd bf       	out	0x3d, r28	; 61
   
   Packet_t packet;
   packet.data.header[0] = packet.data.header[1] = packet.data.header[2] = packet.data.header[3] = 0xFE;
     a46:	8e ef       	ldi	r24, 0xFE	; 254
     a48:	8c 83       	std	Y+4, r24	; 0x04
     a4a:	8b 83       	std	Y+3, r24	; 0x03
     a4c:	8a 83       	std	Y+2, r24	; 0x02
     a4e:	89 83       	std	Y+1, r24	; 0x01
   
   InitIO();
     a50:	47 d1       	rcall	.+654    	; 0xce0 <InitIO>
   
   //Uart
   InitUart0();
     a52:	8d d1       	rcall	.+794    	; 0xd6e <InitUart0>
   
   //SPI
   InitSPI();
     a54:	95 d1       	rcall	.+810    	; 0xd80 <InitSPI>
   
   //Timer
   InitTimer0();
     a56:	51 d1       	rcall	.+674    	; 0xcfa <InitTimer0>
     a58:	55 d1       	rcall	.+682    	; 0xd04 <InitTimer1>
   InitTimer1();
     a5a:	67 d1       	rcall	.+718    	; 0xd2a <InitTimer3>
     a5c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
   InitTimer3();
     a60:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>


   TCNT1 = TCNT3 = 0;
     a64:	1d bc       	out	0x2d, r1	; 45
     a66:	1c bc       	out	0x2c, r1	; 44
     a68:	60 e0       	ldi	r22, 0x00	; 0
   SetDutyCW(0.);
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	cb 01       	movw	r24, r22
     a6e:	2d db       	rcall	.-2470   	; 0xca <SetDutyCW>
     a70:	79 d1       	rcall	.+754    	; 0xd64 <InitADC>
     a72:	58 db       	rcall	.-2384   	; 0x124 <InitLS7366>
   
   //ADC
   InitADC();
     a74:	83 e8       	ldi	r24, 0x83	; 131
     a76:	82 bf       	out	0x32, r24	; 50
   
   //LS7366
   InitLS7366();
     a78:	78 94       	sei
     a7a:	b1 2c       	mov	r11, r1
   

   //TCNT3 = 65536 - 125;   
   TCNT0 = 256 - 125;
     a7c:	0f 2e       	mov	r0, r31
     a7e:	f4 e1       	ldi	r31, 0x14	; 20
   sei();
     a80:	9f 2e       	mov	r9, r31

   unsigned char check = 0;
     a82:	f0 2d       	mov	r31, r0
      if(g_SendFlag > 19){
         g_SendFlag = 0;         

            
         packet.data.id = g_ID;
         packet.data.size = sizeof(Packet_data_t);
     a84:	0f 2e       	mov	r0, r31
     a86:	f3 e0       	ldi	r31, 0x03	; 3
     a88:	af 2e       	mov	r10, r31
     a8a:	f0 2d       	mov	r31, r0
         packet.data.mode = 3;
     a8c:	7e 01       	movw	r14, r28
     a8e:	85 e1       	ldi	r24, 0x15	; 21
     a90:	e8 0e       	add	r14, r24
     a92:	f1 1c       	adc	r15, r1
     a94:	0f 2e       	mov	r0, r31
     a96:	f6 e5       	ldi	r31, 0x56	; 86
     a98:	cf 2e       	mov	r12, r31
     a9a:	f2 e0       	ldi	r31, 0x02	; 2
         case 1:

            g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
            
            if (checkSize == 8) {
               if(g_PacketBuffer.data.id == g_ID){
     a9c:	df 2e       	mov	r13, r31
     a9e:	f0 2d       	mov	r31, r0
     aa0:	68 94       	set
     aa2:	77 24       	eor	r7, r7
     aa4:	71 f8       	bld	r7, 1
     aa6:	88 24       	eor	r8, r8

                  g_PacketMode = 2;
     aa8:	83 94       	inc	r8
     aaa:	ba c0       	rjmp	.+372    	; 0xc20 <main+0x1ee>
     aac:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <g_PacketMode>
         case 0:
            
            if (g_buf[g_BufReadCnt] == 0xFF) {
               checkSize++;
               if (checkSize == 4) {
                  g_PacketMode = 1;
     ab0:	81 30       	cpi	r24, 0x01	; 1
     ab2:	e1 f0       	breq	.+56     	; 0xaec <main+0xba>
   
   //// Packet 통신 설정 ////
    while (1) {
      for(;g_BufReadCnt != g_BufWriteCnt; g_BufReadCnt++){
         
         switch(g_PacketMode){
     ab4:	18 f0       	brcs	.+6      	; 0xabc <main+0x8a>
     ab6:	82 30       	cpi	r24, 0x02	; 2
     ab8:	e1 f1       	breq	.+120    	; 0xb32 <main+0x100>
     aba:	ad c0       	rjmp	.+346    	; 0xc16 <main+0x1e4>
     abc:	e0 91 73 02 	lds	r30, 0x0273	; 0x800273 <g_BufReadCnt>
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	e2 5b       	subi	r30, 0xB2	; 178
         case 0:
            
            if (g_buf[g_BufReadCnt] == 0xFF) {
     ac4:	fe 4f       	sbci	r31, 0xFE	; 254
     ac6:	80 81       	ld	r24, Z
     ac8:	8f 3f       	cpi	r24, 0xFF	; 255
     aca:	69 f4       	brne	.+26     	; 0xae6 <main+0xb4>
     acc:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <checkSize>
     ad0:	8f 5f       	subi	r24, 0xFF	; 255
     ad2:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <checkSize>
               checkSize++;
     ad6:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <checkSize>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f0       	breq	.+2      	; 0xae0 <main+0xae>
               if (checkSize == 4) {
     ade:	9b c0       	rjmp	.+310    	; 0xc16 <main+0x1e4>
     ae0:	80 92 74 02 	sts	0x0274, r8	; 0x800274 <g_PacketMode>
     ae4:	98 c0       	rjmp	.+304    	; 0xc16 <main+0x1e4>
     ae6:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <checkSize>
                  g_PacketMode = 1;
     aea:	95 c0       	rjmp	.+298    	; 0xc16 <main+0x1e4>
     aec:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <checkSize>
               }
            }
            else {
               checkSize = 0;
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	8e 0f       	add	r24, r30
            }
            break;
            
         case 1:

            g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
     af4:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <checkSize>
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	a0 91 73 02 	lds	r26, 0x0273	; 0x800273 <g_BufReadCnt>
     afe:	b0 e0       	ldi	r27, 0x00	; 0
     b00:	a2 5b       	subi	r26, 0xB2	; 178
     b02:	be 4f       	sbci	r27, 0xFE	; 254
     b04:	8c 91       	ld	r24, X
     b06:	ea 5a       	subi	r30, 0xAA	; 170
     b08:	fd 4f       	sbci	r31, 0xFD	; 253
     b0a:	80 83       	st	Z, r24
     b0c:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <checkSize>
     b10:	88 30       	cpi	r24, 0x08	; 8
     b12:	09 f0       	breq	.+2      	; 0xb16 <main+0xe4>
            
            if (checkSize == 8) {
     b14:	80 c0       	rjmp	.+256    	; 0xc16 <main+0x1e4>
     b16:	f6 01       	movw	r30, r12
     b18:	95 81       	ldd	r25, Z+5	; 0x05
     b1a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
               if(g_PacketBuffer.data.id == g_ID){
     b1e:	98 13       	cpse	r25, r24
     b20:	03 c0       	rjmp	.+6      	; 0xb28 <main+0xf6>
     b22:	70 92 74 02 	sts	0x0274, r7	; 0x800274 <g_PacketMode>
     b26:	77 c0       	rjmp	.+238    	; 0xc16 <main+0x1e4>
     b28:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <g_PacketMode>

                  g_PacketMode = 2;
     b2c:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <checkSize>
               }
               else{
                  g_PacketMode = 0;
     b30:	72 c0       	rjmp	.+228    	; 0xc16 <main+0x1e4>
     b32:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <checkSize>
                  checkSize = 0;
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	8e 0f       	add	r24, r30

            break;
         
         case 2:
            
            g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
     b3a:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <checkSize>
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	a0 91 73 02 	lds	r26, 0x0273	; 0x800273 <g_BufReadCnt>
     b44:	b0 e0       	ldi	r27, 0x00	; 0
     b46:	a2 5b       	subi	r26, 0xB2	; 178
     b48:	be 4f       	sbci	r27, 0xFE	; 254
     b4a:	8c 91       	ld	r24, X
     b4c:	ea 5a       	subi	r30, 0xAA	; 170
     b4e:	fd 4f       	sbci	r31, 0xFD	; 253
     b50:	80 83       	st	Z, r24
     b52:	e0 91 73 02 	lds	r30, 0x0273	; 0x800273 <g_BufReadCnt>
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	e2 5b       	subi	r30, 0xB2	; 178
            check += g_buf[g_BufReadCnt];
     b5a:	fe 4f       	sbci	r31, 0xFE	; 254
     b5c:	80 81       	ld	r24, Z
     b5e:	b8 0e       	add	r11, r24
     b60:	f6 01       	movw	r30, r12
     b62:	94 81       	ldd	r25, Z+4	; 0x04
     b64:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <checkSize>
            
            if (checkSize == g_PacketBuffer.data.size) {
     b68:	98 13       	cpse	r25, r24
     b6a:	44 c0       	rjmp	.+136    	; 0xbf4 <main+0x1c2>
     b6c:	87 81       	ldd	r24, Z+7	; 0x07
     b6e:	b8 12       	cpse	r11, r24
     b70:	3b c0       	rjmp	.+118    	; 0xbe8 <main+0x1b6>
     b72:	86 81       	ldd	r24, Z+6	; 0x06

               if(check == g_PacketBuffer.data.check){
     b74:	82 30       	cpi	r24, 0x02	; 2
     b76:	c1 f5       	brne	.+112    	; 0xbe8 <main+0x1b6>

                  switch(g_PacketBuffer.data.mode){
     b78:	60 85       	ldd	r22, Z+8	; 0x08
     b7a:	71 85       	ldd	r23, Z+9	; 0x09
     b7c:	82 85       	ldd	r24, Z+10	; 0x0a

                     case 2:
                     g_Pdes = g_PacketBuffer.data.pos / 1000.; // 목표 값 받아오기
     b7e:	93 85       	ldd	r25, Z+11	; 0x0b
     b80:	16 d2       	rcall	.+1068   	; 0xfae <__floatsisf>
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	4a e7       	ldi	r20, 0x7A	; 122
     b88:	54 e4       	ldi	r21, 0x44	; 68
     b8a:	76 d1       	rcall	.+748    	; 0xe78 <__divsf3>
     b8c:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <g_Pdes>
     b90:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <g_Pdes+0x1>
     b94:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <g_Pdes+0x2>
     b98:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <g_Pdes+0x3>
     b9c:	f6 01       	movw	r30, r12
     b9e:	64 85       	ldd	r22, Z+12	; 0x0c
     ba0:	75 85       	ldd	r23, Z+13	; 0x0d
                     g_Vlimit = g_PacketBuffer.data.velo / 1000.; // 속도 한계 값 받아오기 
     ba2:	86 85       	ldd	r24, Z+14	; 0x0e
     ba4:	97 85       	ldd	r25, Z+15	; 0x0f
     ba6:	03 d2       	rcall	.+1030   	; 0xfae <__floatsisf>
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	4a e7       	ldi	r20, 0x7A	; 122
     bae:	54 e4       	ldi	r21, 0x44	; 68
     bb0:	63 d1       	rcall	.+710    	; 0xe78 <__divsf3>
     bb2:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <g_Vlimit>
     bb6:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <g_Vlimit+0x1>
     bba:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <g_Vlimit+0x2>
     bbe:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <g_Vlimit+0x3>
     bc2:	f6 01       	movw	r30, r12
     bc4:	60 89       	ldd	r22, Z+16	; 0x10
     bc6:	71 89       	ldd	r23, Z+17	; 0x11
                     g_Climit = g_PacketBuffer.data.cur / 1000.; // 전류 한계 값 받아오기
     bc8:	82 89       	ldd	r24, Z+18	; 0x12
     bca:	93 89       	ldd	r25, Z+19	; 0x13
     bcc:	f0 d1       	rcall	.+992    	; 0xfae <__floatsisf>
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	4a e7       	ldi	r20, 0x7A	; 122
     bd4:	54 e4       	ldi	r21, 0x44	; 68
     bd6:	50 d1       	rcall	.+672    	; 0xe78 <__divsf3>
     bd8:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <g_Climit>
     bdc:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <g_Climit+0x1>
     be0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <g_Climit+0x2>
     be4:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <g_Climit+0x3>
     be8:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <g_PacketMode>
     bec:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <checkSize>
     bf0:	b1 2c       	mov	r11, r1
                     break;
                     }
               }
               
               check = 0;
               g_PacketMode = 0;
     bf2:	11 c0       	rjmp	.+34     	; 0xc16 <main+0x1e4>
     bf4:	f6 01       	movw	r30, r12
               checkSize = 0;
     bf6:	94 81       	ldd	r25, Z+4	; 0x04
                     g_Climit = g_PacketBuffer.data.cur / 1000.; // 전류 한계 값 받아오기
                     break;
                     }
               }
               
               check = 0;
     bf8:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <checkSize>
               g_PacketMode = 0;
               checkSize = 0;
            }
            else if(checkSize > g_PacketBuffer.data.size || checkSize > sizeof(Packet_t)) {
     bfc:	98 17       	cp	r25, r24
     bfe:	20 f0       	brcs	.+8      	; 0xc08 <main+0x1d6>
     c00:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <checkSize>
     c04:	85 31       	cpi	r24, 0x15	; 21
     c06:	38 f0       	brcs	.+14     	; 0xc16 <main+0x1e4>
     c08:	86 e6       	ldi	r24, 0x66	; 102
     c0a:	bf d0       	rcall	.+382    	; 0xd8a <TransUart0>
     c0c:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <g_PacketMode>
               TransUart0('f');
     c10:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <checkSize>
     c14:	b1 2c       	mov	r11, r1
               check = 0;
               g_PacketMode = 0;
     c16:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <g_BufReadCnt>
               checkSize = 0;
     c1a:	8f 5f       	subi	r24, 0xFF	; 255
     c1c:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <g_BufReadCnt>

   unsigned char check = 0;
   
   //// Packet 통신 설정 ////
    while (1) {
      for(;g_BufReadCnt != g_BufWriteCnt; g_BufReadCnt++){
     c20:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <g_BufReadCnt>
     c24:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <g_BufWriteCnt>
     c28:	98 13       	cpse	r25, r24
     c2a:	40 cf       	rjmp	.-384    	; 0xaac <main+0x7a>
     c2c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_SendFlag>
     c30:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <g_SendFlag+0x1>
     c34:	44 97       	sbiw	r24, 0x14	; 20
               checkSize = 0;
            }
         }
      }

      if(g_SendFlag > 19){
     c36:	a4 f3       	brlt	.-24     	; 0xc20 <main+0x1ee>
     c38:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <g_SendFlag+0x1>
     c3c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <g_SendFlag>
     c40:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
         g_SendFlag = 0;         
     c44:	8e 83       	std	Y+6, r24	; 0x06
     c46:	9d 82       	std	Y+5, r9	; 0x05
     c48:	af 82       	std	Y+7, r10	; 0x07

            
         packet.data.id = g_ID;
     c4a:	18 86       	std	Y+8, r1	; 0x08
     c4c:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <g_Pcur>
         packet.data.size = sizeof(Packet_data_t);
         packet.data.mode = 3;
         packet.data.check = 0;
     c50:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <g_Pcur+0x1>
         
         
         //현재 모터 값으로 수정을 해야한다.
         packet.data.pos = g_Pcur * 1000;// g_Pcur * 1000;   //(rad 값)*1000  -> ODE에서 rad 값이 degree로 표현됨
     c54:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <g_Pcur+0x2>
     c58:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <g_Pcur+0x3>
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	4a e7       	ldi	r20, 0x7A	; 122
     c62:	54 e4       	ldi	r21, 0x44	; 68
     c64:	58 d2       	rcall	.+1200   	; 0x1116 <__mulsf3>
     c66:	70 d1       	rcall	.+736    	; 0xf48 <__fixsfsi>
     c68:	69 87       	std	Y+9, r22	; 0x09
     c6a:	7a 87       	std	Y+10, r23	; 0x0a
     c6c:	8b 87       	std	Y+11, r24	; 0x0b
     c6e:	9c 87       	std	Y+12, r25	; 0x0c
     c70:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <g_Vcur>
     c74:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <g_Vcur+0x1>
         packet.data.velo = g_Vcur * 1000;
     c78:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <g_Vcur+0x2>
     c7c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <g_Vcur+0x3>
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	4a e7       	ldi	r20, 0x7A	; 122
     c86:	54 e4       	ldi	r21, 0x44	; 68
     c88:	46 d2       	rcall	.+1164   	; 0x1116 <__mulsf3>
     c8a:	5e d1       	rcall	.+700    	; 0xf48 <__fixsfsi>
     c8c:	6d 87       	std	Y+13, r22	; 0x0d
     c8e:	7e 87       	std	Y+14, r23	; 0x0e
     c90:	8f 87       	std	Y+15, r24	; 0x0f
     c92:	98 8b       	std	Y+16, r25	; 0x10
     c94:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <g_Ccur>
     c98:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <g_Ccur+0x1>
         packet.data.cur = g_Ccur * 1000;      //display하는거는 torque가 맞으나 실제 내부 값은 current값이 맞음 즉 g_Climit은 전류값 [A]
     c9c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <g_Ccur+0x2>
     ca0:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <g_Ccur+0x3>
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	4a e7       	ldi	r20, 0x7A	; 122
     caa:	54 e4       	ldi	r21, 0x44	; 68
     cac:	34 d2       	rcall	.+1128   	; 0x1116 <__mulsf3>
     cae:	4c d1       	rcall	.+664    	; 0xf48 <__fixsfsi>
     cb0:	69 8b       	std	Y+17, r22	; 0x11
     cb2:	7a 8b       	std	Y+18, r23	; 0x12
     cb4:	8b 8b       	std	Y+19, r24	; 0x13
     cb6:	9c 8b       	std	Y+20, r25	; 0x14
     cb8:	fe 01       	movw	r30, r28
     cba:	39 96       	adiw	r30, 0x09	; 9
     cbc:	81 91       	ld	r24, Z+
     cbe:	98 85       	ldd	r25, Y+8	; 0x08
     cc0:	89 0f       	add	r24, r25
     cc2:	88 87       	std	Y+8, r24	; 0x08
         
         /////////////////////////////////////
         
         for (int i = 8; i < sizeof(Packet_t); i++)
            packet.data.check += packet.buffer[i];
     cc4:	ee 15       	cp	r30, r14
     cc6:	ff 05       	cpc	r31, r15
     cc8:	c9 f7       	brne	.-14     	; 0xcbc <main+0x28a>
     cca:	8e 01       	movw	r16, r28
         packet.data.velo = g_Vcur * 1000;
         packet.data.cur = g_Ccur * 1000;      //display하는거는 torque가 맞으나 실제 내부 값은 current값이 맞음 즉 g_Climit은 전류값 [A]
         
         /////////////////////////////////////
         
         for (int i = 8; i < sizeof(Packet_t); i++)
     ccc:	0f 5f       	subi	r16, 0xFF	; 255
     cce:	1f 4f       	sbci	r17, 0xFF	; 255
     cd0:	f8 01       	movw	r30, r16
     cd2:	81 91       	ld	r24, Z+
     cd4:	8f 01       	movw	r16, r30
     cd6:	59 d0       	rcall	.+178    	; 0xd8a <TransUart0>
            packet.data.check += packet.buffer[i];
            
         
         for(int i=0; i<packet.data.size; i++){
            TransUart0(packet.buffer[i]);
     cd8:	0e 15       	cp	r16, r14
     cda:	1f 05       	cpc	r17, r15
     cdc:	c9 f7       	brne	.-14     	; 0xcd0 <main+0x29e>
     cde:	a0 cf       	rjmp	.-192    	; 0xc20 <main+0x1ee>

00000ce0 <InitIO>:
     ce0:	8f ef       	ldi	r24, 0xFF	; 255
         
         for (int i = 8; i < sizeof(Packet_t); i++)
            packet.data.check += packet.buffer[i];
            
         
         for(int i=0; i<packet.data.size; i++){
     ce2:	8a bb       	out	0x1a, r24	; 26
     ce4:	84 bb       	out	0x14, r24	; 20
     ce6:	88 e0       	ldi	r24, 0x08	; 8
     ce8:	81 bb       	out	0x11, r24	; 17
     cea:	87 e6       	ldi	r24, 0x67	; 103
     cec:	87 bb       	out	0x17, r24	; 23
     cee:	8a e1       	ldi	r24, 0x1A	; 26
     cf0:	82 b9       	out	0x02, r24	; 2
     cf2:	1b ba       	out	0x1b, r1	; 27
     cf4:	87 e0       	ldi	r24, 0x07	; 7
     cf6:	88 bb       	out	0x18, r24	; 24
     cf8:	08 95       	ret

00000cfa <InitTimer0>:
     cfa:	84 e0       	ldi	r24, 0x04	; 4
     cfc:	83 bf       	out	0x33, r24	; 51
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	87 bf       	out	0x37, r24	; 55
     d02:	08 95       	ret

00000d04 <InitTimer1>:
     d04:	82 ee       	ldi	r24, 0xE2	; 226
     d06:	8f bd       	out	0x2f, r24	; 47
     d08:	81 e1       	ldi	r24, 0x11	; 17
     d0a:	8e bd       	out	0x2e, r24	; 46
     d0c:	8f e8       	ldi	r24, 0x8F	; 143
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	97 bd       	out	0x27, r25	; 39
     d12:	86 bd       	out	0x26, r24	; 38
     d14:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     d18:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     d1c:	1b bc       	out	0x2b, r1	; 43
     d1e:	1a bc       	out	0x2a, r1	; 42
     d20:	19 bc       	out	0x29, r1	; 41
     d22:	18 bc       	out	0x28, r1	; 40
     d24:	1d bc       	out	0x2d, r1	; 45
     d26:	1c bc       	out	0x2c, r1	; 44
     d28:	08 95       	ret

00000d2a <InitTimer3>:
     d2a:	82 eb       	ldi	r24, 0xB2	; 178
     d2c:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     d30:	81 e1       	ldi	r24, 0x11	; 17
     d32:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     d36:	8f e8       	ldi	r24, 0x8F	; 143
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     d3e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     d42:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     d46:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     d4a:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     d4e:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     d52:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     d56:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     d5a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     d5e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     d62:	08 95       	ret

00000d64 <InitADC>:
     d64:	80 e4       	ldi	r24, 0x40	; 64
     d66:	87 b9       	out	0x07, r24	; 7
     d68:	86 e8       	ldi	r24, 0x86	; 134
     d6a:	86 b9       	out	0x06, r24	; 6
     d6c:	08 95       	ret

00000d6e <InitUart0>:
     d6e:	1b b8       	out	0x0b, r1	; 11
     d70:	88 e9       	ldi	r24, 0x98	; 152
     d72:	8a b9       	out	0x0a, r24	; 10
     d74:	86 e0       	ldi	r24, 0x06	; 6
     d76:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     d7a:	87 e6       	ldi	r24, 0x67	; 103
     d7c:	89 b9       	out	0x09, r24	; 9
     d7e:	08 95       	ret

00000d80 <InitSPI>:
     d80:	80 e5       	ldi	r24, 0x50	; 80
     d82:	8d b9       	out	0x0d, r24	; 13
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	8e b9       	out	0x0e, r24	; 14
     d88:	08 95       	ret

00000d8a <TransUart0>:
     d8a:	5d 9b       	sbis	0x0b, 5	; 11
     d8c:	fe cf       	rjmp	.-4      	; 0xd8a <TransUart0>
     d8e:	8c b9       	out	0x0c, r24	; 12
     d90:	08 95       	ret

00000d92 <SPI_MasterSend>:
     d92:	8f b9       	out	0x0f, r24	; 15
     d94:	77 9b       	sbis	0x0e, 7	; 14
     d96:	fe cf       	rjmp	.-4      	; 0xd94 <SPI_MasterSend+0x2>
     d98:	8f b1       	in	r24, 0x0f	; 15
     d9a:	08 95       	ret

00000d9c <SPI_MasterRecv>:
     d9c:	1f b8       	out	0x0f, r1	; 15
     d9e:	77 9b       	sbis	0x0e, 7	; 14
     da0:	fe cf       	rjmp	.-4      	; 0xd9e <SPI_MasterRecv+0x2>
     da2:	8f b1       	in	r24, 0x0f	; 15
     da4:	08 95       	ret

00000da6 <__subsf3>:
     da6:	50 58       	subi	r21, 0x80	; 128

00000da8 <__addsf3>:
     da8:	bb 27       	eor	r27, r27
     daa:	aa 27       	eor	r26, r26
     dac:	0e d0       	rcall	.+28     	; 0xdca <__addsf3x>
     dae:	75 c1       	rjmp	.+746    	; 0x109a <__fp_round>
     db0:	66 d1       	rcall	.+716    	; 0x107e <__fp_pscA>
     db2:	30 f0       	brcs	.+12     	; 0xdc0 <__addsf3+0x18>
     db4:	6b d1       	rcall	.+726    	; 0x108c <__fp_pscB>
     db6:	20 f0       	brcs	.+8      	; 0xdc0 <__addsf3+0x18>
     db8:	31 f4       	brne	.+12     	; 0xdc6 <__addsf3+0x1e>
     dba:	9f 3f       	cpi	r25, 0xFF	; 255
     dbc:	11 f4       	brne	.+4      	; 0xdc2 <__addsf3+0x1a>
     dbe:	1e f4       	brtc	.+6      	; 0xdc6 <__addsf3+0x1e>
     dc0:	5b c1       	rjmp	.+694    	; 0x1078 <__fp_nan>
     dc2:	0e f4       	brtc	.+2      	; 0xdc6 <__addsf3+0x1e>
     dc4:	e0 95       	com	r30
     dc6:	e7 fb       	bst	r30, 7
     dc8:	51 c1       	rjmp	.+674    	; 0x106c <__fp_inf>

00000dca <__addsf3x>:
     dca:	e9 2f       	mov	r30, r25
     dcc:	77 d1       	rcall	.+750    	; 0x10bc <__fp_split3>
     dce:	80 f3       	brcs	.-32     	; 0xdb0 <__addsf3+0x8>
     dd0:	ba 17       	cp	r27, r26
     dd2:	62 07       	cpc	r22, r18
     dd4:	73 07       	cpc	r23, r19
     dd6:	84 07       	cpc	r24, r20
     dd8:	95 07       	cpc	r25, r21
     dda:	18 f0       	brcs	.+6      	; 0xde2 <__addsf3x+0x18>
     ddc:	71 f4       	brne	.+28     	; 0xdfa <__addsf3x+0x30>
     dde:	9e f5       	brtc	.+102    	; 0xe46 <__addsf3x+0x7c>
     de0:	8f c1       	rjmp	.+798    	; 0x1100 <__fp_zero>
     de2:	0e f4       	brtc	.+2      	; 0xde6 <__addsf3x+0x1c>
     de4:	e0 95       	com	r30
     de6:	0b 2e       	mov	r0, r27
     de8:	ba 2f       	mov	r27, r26
     dea:	a0 2d       	mov	r26, r0
     dec:	0b 01       	movw	r0, r22
     dee:	b9 01       	movw	r22, r18
     df0:	90 01       	movw	r18, r0
     df2:	0c 01       	movw	r0, r24
     df4:	ca 01       	movw	r24, r20
     df6:	a0 01       	movw	r20, r0
     df8:	11 24       	eor	r1, r1
     dfa:	ff 27       	eor	r31, r31
     dfc:	59 1b       	sub	r21, r25
     dfe:	99 f0       	breq	.+38     	; 0xe26 <__addsf3x+0x5c>
     e00:	59 3f       	cpi	r21, 0xF9	; 249
     e02:	50 f4       	brcc	.+20     	; 0xe18 <__addsf3x+0x4e>
     e04:	50 3e       	cpi	r21, 0xE0	; 224
     e06:	68 f1       	brcs	.+90     	; 0xe62 <__addsf3x+0x98>
     e08:	1a 16       	cp	r1, r26
     e0a:	f0 40       	sbci	r31, 0x00	; 0
     e0c:	a2 2f       	mov	r26, r18
     e0e:	23 2f       	mov	r18, r19
     e10:	34 2f       	mov	r19, r20
     e12:	44 27       	eor	r20, r20
     e14:	58 5f       	subi	r21, 0xF8	; 248
     e16:	f3 cf       	rjmp	.-26     	; 0xdfe <__addsf3x+0x34>
     e18:	46 95       	lsr	r20
     e1a:	37 95       	ror	r19
     e1c:	27 95       	ror	r18
     e1e:	a7 95       	ror	r26
     e20:	f0 40       	sbci	r31, 0x00	; 0
     e22:	53 95       	inc	r21
     e24:	c9 f7       	brne	.-14     	; 0xe18 <__addsf3x+0x4e>
     e26:	7e f4       	brtc	.+30     	; 0xe46 <__addsf3x+0x7c>
     e28:	1f 16       	cp	r1, r31
     e2a:	ba 0b       	sbc	r27, r26
     e2c:	62 0b       	sbc	r22, r18
     e2e:	73 0b       	sbc	r23, r19
     e30:	84 0b       	sbc	r24, r20
     e32:	ba f0       	brmi	.+46     	; 0xe62 <__addsf3x+0x98>
     e34:	91 50       	subi	r25, 0x01	; 1
     e36:	a1 f0       	breq	.+40     	; 0xe60 <__addsf3x+0x96>
     e38:	ff 0f       	add	r31, r31
     e3a:	bb 1f       	adc	r27, r27
     e3c:	66 1f       	adc	r22, r22
     e3e:	77 1f       	adc	r23, r23
     e40:	88 1f       	adc	r24, r24
     e42:	c2 f7       	brpl	.-16     	; 0xe34 <__addsf3x+0x6a>
     e44:	0e c0       	rjmp	.+28     	; 0xe62 <__addsf3x+0x98>
     e46:	ba 0f       	add	r27, r26
     e48:	62 1f       	adc	r22, r18
     e4a:	73 1f       	adc	r23, r19
     e4c:	84 1f       	adc	r24, r20
     e4e:	48 f4       	brcc	.+18     	; 0xe62 <__addsf3x+0x98>
     e50:	87 95       	ror	r24
     e52:	77 95       	ror	r23
     e54:	67 95       	ror	r22
     e56:	b7 95       	ror	r27
     e58:	f7 95       	ror	r31
     e5a:	9e 3f       	cpi	r25, 0xFE	; 254
     e5c:	08 f0       	brcs	.+2      	; 0xe60 <__addsf3x+0x96>
     e5e:	b3 cf       	rjmp	.-154    	; 0xdc6 <__addsf3+0x1e>
     e60:	93 95       	inc	r25
     e62:	88 0f       	add	r24, r24
     e64:	08 f0       	brcs	.+2      	; 0xe68 <__addsf3x+0x9e>
     e66:	99 27       	eor	r25, r25
     e68:	ee 0f       	add	r30, r30
     e6a:	97 95       	ror	r25
     e6c:	87 95       	ror	r24
     e6e:	08 95       	ret

00000e70 <__cmpsf2>:
     e70:	d9 d0       	rcall	.+434    	; 0x1024 <__fp_cmp>
     e72:	08 f4       	brcc	.+2      	; 0xe76 <__cmpsf2+0x6>
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	08 95       	ret

00000e78 <__divsf3>:
     e78:	0c d0       	rcall	.+24     	; 0xe92 <__divsf3x>
     e7a:	0f c1       	rjmp	.+542    	; 0x109a <__fp_round>
     e7c:	07 d1       	rcall	.+526    	; 0x108c <__fp_pscB>
     e7e:	40 f0       	brcs	.+16     	; 0xe90 <__divsf3+0x18>
     e80:	fe d0       	rcall	.+508    	; 0x107e <__fp_pscA>
     e82:	30 f0       	brcs	.+12     	; 0xe90 <__divsf3+0x18>
     e84:	21 f4       	brne	.+8      	; 0xe8e <__divsf3+0x16>
     e86:	5f 3f       	cpi	r21, 0xFF	; 255
     e88:	19 f0       	breq	.+6      	; 0xe90 <__divsf3+0x18>
     e8a:	f0 c0       	rjmp	.+480    	; 0x106c <__fp_inf>
     e8c:	51 11       	cpse	r21, r1
     e8e:	39 c1       	rjmp	.+626    	; 0x1102 <__fp_szero>
     e90:	f3 c0       	rjmp	.+486    	; 0x1078 <__fp_nan>

00000e92 <__divsf3x>:
     e92:	14 d1       	rcall	.+552    	; 0x10bc <__fp_split3>
     e94:	98 f3       	brcs	.-26     	; 0xe7c <__divsf3+0x4>

00000e96 <__divsf3_pse>:
     e96:	99 23       	and	r25, r25
     e98:	c9 f3       	breq	.-14     	; 0xe8c <__divsf3+0x14>
     e9a:	55 23       	and	r21, r21
     e9c:	b1 f3       	breq	.-20     	; 0xe8a <__divsf3+0x12>
     e9e:	95 1b       	sub	r25, r21
     ea0:	55 0b       	sbc	r21, r21
     ea2:	bb 27       	eor	r27, r27
     ea4:	aa 27       	eor	r26, r26
     ea6:	62 17       	cp	r22, r18
     ea8:	73 07       	cpc	r23, r19
     eaa:	84 07       	cpc	r24, r20
     eac:	38 f0       	brcs	.+14     	; 0xebc <__divsf3_pse+0x26>
     eae:	9f 5f       	subi	r25, 0xFF	; 255
     eb0:	5f 4f       	sbci	r21, 0xFF	; 255
     eb2:	22 0f       	add	r18, r18
     eb4:	33 1f       	adc	r19, r19
     eb6:	44 1f       	adc	r20, r20
     eb8:	aa 1f       	adc	r26, r26
     eba:	a9 f3       	breq	.-22     	; 0xea6 <__divsf3_pse+0x10>
     ebc:	33 d0       	rcall	.+102    	; 0xf24 <__divsf3_pse+0x8e>
     ebe:	0e 2e       	mov	r0, r30
     ec0:	3a f0       	brmi	.+14     	; 0xed0 <__divsf3_pse+0x3a>
     ec2:	e0 e8       	ldi	r30, 0x80	; 128
     ec4:	30 d0       	rcall	.+96     	; 0xf26 <__divsf3_pse+0x90>
     ec6:	91 50       	subi	r25, 0x01	; 1
     ec8:	50 40       	sbci	r21, 0x00	; 0
     eca:	e6 95       	lsr	r30
     ecc:	00 1c       	adc	r0, r0
     ece:	ca f7       	brpl	.-14     	; 0xec2 <__divsf3_pse+0x2c>
     ed0:	29 d0       	rcall	.+82     	; 0xf24 <__divsf3_pse+0x8e>
     ed2:	fe 2f       	mov	r31, r30
     ed4:	27 d0       	rcall	.+78     	; 0xf24 <__divsf3_pse+0x8e>
     ed6:	66 0f       	add	r22, r22
     ed8:	77 1f       	adc	r23, r23
     eda:	88 1f       	adc	r24, r24
     edc:	bb 1f       	adc	r27, r27
     ede:	26 17       	cp	r18, r22
     ee0:	37 07       	cpc	r19, r23
     ee2:	48 07       	cpc	r20, r24
     ee4:	ab 07       	cpc	r26, r27
     ee6:	b0 e8       	ldi	r27, 0x80	; 128
     ee8:	09 f0       	breq	.+2      	; 0xeec <__divsf3_pse+0x56>
     eea:	bb 0b       	sbc	r27, r27
     eec:	80 2d       	mov	r24, r0
     eee:	bf 01       	movw	r22, r30
     ef0:	ff 27       	eor	r31, r31
     ef2:	93 58       	subi	r25, 0x83	; 131
     ef4:	5f 4f       	sbci	r21, 0xFF	; 255
     ef6:	2a f0       	brmi	.+10     	; 0xf02 <__divsf3_pse+0x6c>
     ef8:	9e 3f       	cpi	r25, 0xFE	; 254
     efa:	51 05       	cpc	r21, r1
     efc:	68 f0       	brcs	.+26     	; 0xf18 <__divsf3_pse+0x82>
     efe:	b6 c0       	rjmp	.+364    	; 0x106c <__fp_inf>
     f00:	00 c1       	rjmp	.+512    	; 0x1102 <__fp_szero>
     f02:	5f 3f       	cpi	r21, 0xFF	; 255
     f04:	ec f3       	brlt	.-6      	; 0xf00 <__divsf3_pse+0x6a>
     f06:	98 3e       	cpi	r25, 0xE8	; 232
     f08:	dc f3       	brlt	.-10     	; 0xf00 <__divsf3_pse+0x6a>
     f0a:	86 95       	lsr	r24
     f0c:	77 95       	ror	r23
     f0e:	67 95       	ror	r22
     f10:	b7 95       	ror	r27
     f12:	f7 95       	ror	r31
     f14:	9f 5f       	subi	r25, 0xFF	; 255
     f16:	c9 f7       	brne	.-14     	; 0xf0a <__divsf3_pse+0x74>
     f18:	88 0f       	add	r24, r24
     f1a:	91 1d       	adc	r25, r1
     f1c:	96 95       	lsr	r25
     f1e:	87 95       	ror	r24
     f20:	97 f9       	bld	r25, 7
     f22:	08 95       	ret
     f24:	e1 e0       	ldi	r30, 0x01	; 1
     f26:	66 0f       	add	r22, r22
     f28:	77 1f       	adc	r23, r23
     f2a:	88 1f       	adc	r24, r24
     f2c:	bb 1f       	adc	r27, r27
     f2e:	62 17       	cp	r22, r18
     f30:	73 07       	cpc	r23, r19
     f32:	84 07       	cpc	r24, r20
     f34:	ba 07       	cpc	r27, r26
     f36:	20 f0       	brcs	.+8      	; 0xf40 <__divsf3_pse+0xaa>
     f38:	62 1b       	sub	r22, r18
     f3a:	73 0b       	sbc	r23, r19
     f3c:	84 0b       	sbc	r24, r20
     f3e:	ba 0b       	sbc	r27, r26
     f40:	ee 1f       	adc	r30, r30
     f42:	88 f7       	brcc	.-30     	; 0xf26 <__divsf3_pse+0x90>
     f44:	e0 95       	com	r30
     f46:	08 95       	ret

00000f48 <__fixsfsi>:
     f48:	04 d0       	rcall	.+8      	; 0xf52 <__fixunssfsi>
     f4a:	68 94       	set
     f4c:	b1 11       	cpse	r27, r1
     f4e:	d9 c0       	rjmp	.+434    	; 0x1102 <__fp_szero>
     f50:	08 95       	ret

00000f52 <__fixunssfsi>:
     f52:	bc d0       	rcall	.+376    	; 0x10cc <__fp_splitA>
     f54:	88 f0       	brcs	.+34     	; 0xf78 <__fixunssfsi+0x26>
     f56:	9f 57       	subi	r25, 0x7F	; 127
     f58:	90 f0       	brcs	.+36     	; 0xf7e <__fixunssfsi+0x2c>
     f5a:	b9 2f       	mov	r27, r25
     f5c:	99 27       	eor	r25, r25
     f5e:	b7 51       	subi	r27, 0x17	; 23
     f60:	a0 f0       	brcs	.+40     	; 0xf8a <__fixunssfsi+0x38>
     f62:	d1 f0       	breq	.+52     	; 0xf98 <__fixunssfsi+0x46>
     f64:	66 0f       	add	r22, r22
     f66:	77 1f       	adc	r23, r23
     f68:	88 1f       	adc	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	1a f0       	brmi	.+6      	; 0xf74 <__fixunssfsi+0x22>
     f6e:	ba 95       	dec	r27
     f70:	c9 f7       	brne	.-14     	; 0xf64 <__fixunssfsi+0x12>
     f72:	12 c0       	rjmp	.+36     	; 0xf98 <__fixunssfsi+0x46>
     f74:	b1 30       	cpi	r27, 0x01	; 1
     f76:	81 f0       	breq	.+32     	; 0xf98 <__fixunssfsi+0x46>
     f78:	c3 d0       	rcall	.+390    	; 0x1100 <__fp_zero>
     f7a:	b1 e0       	ldi	r27, 0x01	; 1
     f7c:	08 95       	ret
     f7e:	c0 c0       	rjmp	.+384    	; 0x1100 <__fp_zero>
     f80:	67 2f       	mov	r22, r23
     f82:	78 2f       	mov	r23, r24
     f84:	88 27       	eor	r24, r24
     f86:	b8 5f       	subi	r27, 0xF8	; 248
     f88:	39 f0       	breq	.+14     	; 0xf98 <__fixunssfsi+0x46>
     f8a:	b9 3f       	cpi	r27, 0xF9	; 249
     f8c:	cc f3       	brlt	.-14     	; 0xf80 <__fixunssfsi+0x2e>
     f8e:	86 95       	lsr	r24
     f90:	77 95       	ror	r23
     f92:	67 95       	ror	r22
     f94:	b3 95       	inc	r27
     f96:	d9 f7       	brne	.-10     	; 0xf8e <__fixunssfsi+0x3c>
     f98:	3e f4       	brtc	.+14     	; 0xfa8 <__fixunssfsi+0x56>
     f9a:	90 95       	com	r25
     f9c:	80 95       	com	r24
     f9e:	70 95       	com	r23
     fa0:	61 95       	neg	r22
     fa2:	7f 4f       	sbci	r23, 0xFF	; 255
     fa4:	8f 4f       	sbci	r24, 0xFF	; 255
     fa6:	9f 4f       	sbci	r25, 0xFF	; 255
     fa8:	08 95       	ret

00000faa <__floatunsisf>:
     faa:	e8 94       	clt
     fac:	09 c0       	rjmp	.+18     	; 0xfc0 <__floatsisf+0x12>

00000fae <__floatsisf>:
     fae:	97 fb       	bst	r25, 7
     fb0:	3e f4       	brtc	.+14     	; 0xfc0 <__floatsisf+0x12>
     fb2:	90 95       	com	r25
     fb4:	80 95       	com	r24
     fb6:	70 95       	com	r23
     fb8:	61 95       	neg	r22
     fba:	7f 4f       	sbci	r23, 0xFF	; 255
     fbc:	8f 4f       	sbci	r24, 0xFF	; 255
     fbe:	9f 4f       	sbci	r25, 0xFF	; 255
     fc0:	99 23       	and	r25, r25
     fc2:	a9 f0       	breq	.+42     	; 0xfee <__floatsisf+0x40>
     fc4:	f9 2f       	mov	r31, r25
     fc6:	96 e9       	ldi	r25, 0x96	; 150
     fc8:	bb 27       	eor	r27, r27
     fca:	93 95       	inc	r25
     fcc:	f6 95       	lsr	r31
     fce:	87 95       	ror	r24
     fd0:	77 95       	ror	r23
     fd2:	67 95       	ror	r22
     fd4:	b7 95       	ror	r27
     fd6:	f1 11       	cpse	r31, r1
     fd8:	f8 cf       	rjmp	.-16     	; 0xfca <__floatsisf+0x1c>
     fda:	fa f4       	brpl	.+62     	; 0x101a <__DATA_REGION_LENGTH__+0x1a>
     fdc:	bb 0f       	add	r27, r27
     fde:	11 f4       	brne	.+4      	; 0xfe4 <__floatsisf+0x36>
     fe0:	60 ff       	sbrs	r22, 0
     fe2:	1b c0       	rjmp	.+54     	; 0x101a <__DATA_REGION_LENGTH__+0x1a>
     fe4:	6f 5f       	subi	r22, 0xFF	; 255
     fe6:	7f 4f       	sbci	r23, 0xFF	; 255
     fe8:	8f 4f       	sbci	r24, 0xFF	; 255
     fea:	9f 4f       	sbci	r25, 0xFF	; 255
     fec:	16 c0       	rjmp	.+44     	; 0x101a <__DATA_REGION_LENGTH__+0x1a>
     fee:	88 23       	and	r24, r24
     ff0:	11 f0       	breq	.+4      	; 0xff6 <__floatsisf+0x48>
     ff2:	96 e9       	ldi	r25, 0x96	; 150
     ff4:	11 c0       	rjmp	.+34     	; 0x1018 <__DATA_REGION_LENGTH__+0x18>
     ff6:	77 23       	and	r23, r23
     ff8:	21 f0       	breq	.+8      	; 0x1002 <__DATA_REGION_LENGTH__+0x2>
     ffa:	9e e8       	ldi	r25, 0x8E	; 142
     ffc:	87 2f       	mov	r24, r23
     ffe:	76 2f       	mov	r23, r22
    1000:	05 c0       	rjmp	.+10     	; 0x100c <__DATA_REGION_LENGTH__+0xc>
    1002:	66 23       	and	r22, r22
    1004:	71 f0       	breq	.+28     	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
    1006:	96 e8       	ldi	r25, 0x86	; 134
    1008:	86 2f       	mov	r24, r22
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	2a f0       	brmi	.+10     	; 0x101a <__DATA_REGION_LENGTH__+0x1a>
    1010:	9a 95       	dec	r25
    1012:	66 0f       	add	r22, r22
    1014:	77 1f       	adc	r23, r23
    1016:	88 1f       	adc	r24, r24
    1018:	da f7       	brpl	.-10     	; 0x1010 <__DATA_REGION_LENGTH__+0x10>
    101a:	88 0f       	add	r24, r24
    101c:	96 95       	lsr	r25
    101e:	87 95       	ror	r24
    1020:	97 f9       	bld	r25, 7
    1022:	08 95       	ret

00001024 <__fp_cmp>:
    1024:	99 0f       	add	r25, r25
    1026:	00 08       	sbc	r0, r0
    1028:	55 0f       	add	r21, r21
    102a:	aa 0b       	sbc	r26, r26
    102c:	e0 e8       	ldi	r30, 0x80	; 128
    102e:	fe ef       	ldi	r31, 0xFE	; 254
    1030:	16 16       	cp	r1, r22
    1032:	17 06       	cpc	r1, r23
    1034:	e8 07       	cpc	r30, r24
    1036:	f9 07       	cpc	r31, r25
    1038:	c0 f0       	brcs	.+48     	; 0x106a <__fp_cmp+0x46>
    103a:	12 16       	cp	r1, r18
    103c:	13 06       	cpc	r1, r19
    103e:	e4 07       	cpc	r30, r20
    1040:	f5 07       	cpc	r31, r21
    1042:	98 f0       	brcs	.+38     	; 0x106a <__fp_cmp+0x46>
    1044:	62 1b       	sub	r22, r18
    1046:	73 0b       	sbc	r23, r19
    1048:	84 0b       	sbc	r24, r20
    104a:	95 0b       	sbc	r25, r21
    104c:	39 f4       	brne	.+14     	; 0x105c <__fp_cmp+0x38>
    104e:	0a 26       	eor	r0, r26
    1050:	61 f0       	breq	.+24     	; 0x106a <__fp_cmp+0x46>
    1052:	23 2b       	or	r18, r19
    1054:	24 2b       	or	r18, r20
    1056:	25 2b       	or	r18, r21
    1058:	21 f4       	brne	.+8      	; 0x1062 <__fp_cmp+0x3e>
    105a:	08 95       	ret
    105c:	0a 26       	eor	r0, r26
    105e:	09 f4       	brne	.+2      	; 0x1062 <__fp_cmp+0x3e>
    1060:	a1 40       	sbci	r26, 0x01	; 1
    1062:	a6 95       	lsr	r26
    1064:	8f ef       	ldi	r24, 0xFF	; 255
    1066:	81 1d       	adc	r24, r1
    1068:	81 1d       	adc	r24, r1
    106a:	08 95       	ret

0000106c <__fp_inf>:
    106c:	97 f9       	bld	r25, 7
    106e:	9f 67       	ori	r25, 0x7F	; 127
    1070:	80 e8       	ldi	r24, 0x80	; 128
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	60 e0       	ldi	r22, 0x00	; 0
    1076:	08 95       	ret

00001078 <__fp_nan>:
    1078:	9f ef       	ldi	r25, 0xFF	; 255
    107a:	80 ec       	ldi	r24, 0xC0	; 192
    107c:	08 95       	ret

0000107e <__fp_pscA>:
    107e:	00 24       	eor	r0, r0
    1080:	0a 94       	dec	r0
    1082:	16 16       	cp	r1, r22
    1084:	17 06       	cpc	r1, r23
    1086:	18 06       	cpc	r1, r24
    1088:	09 06       	cpc	r0, r25
    108a:	08 95       	ret

0000108c <__fp_pscB>:
    108c:	00 24       	eor	r0, r0
    108e:	0a 94       	dec	r0
    1090:	12 16       	cp	r1, r18
    1092:	13 06       	cpc	r1, r19
    1094:	14 06       	cpc	r1, r20
    1096:	05 06       	cpc	r0, r21
    1098:	08 95       	ret

0000109a <__fp_round>:
    109a:	09 2e       	mov	r0, r25
    109c:	03 94       	inc	r0
    109e:	00 0c       	add	r0, r0
    10a0:	11 f4       	brne	.+4      	; 0x10a6 <__fp_round+0xc>
    10a2:	88 23       	and	r24, r24
    10a4:	52 f0       	brmi	.+20     	; 0x10ba <__fp_round+0x20>
    10a6:	bb 0f       	add	r27, r27
    10a8:	40 f4       	brcc	.+16     	; 0x10ba <__fp_round+0x20>
    10aa:	bf 2b       	or	r27, r31
    10ac:	11 f4       	brne	.+4      	; 0x10b2 <__fp_round+0x18>
    10ae:	60 ff       	sbrs	r22, 0
    10b0:	04 c0       	rjmp	.+8      	; 0x10ba <__fp_round+0x20>
    10b2:	6f 5f       	subi	r22, 0xFF	; 255
    10b4:	7f 4f       	sbci	r23, 0xFF	; 255
    10b6:	8f 4f       	sbci	r24, 0xFF	; 255
    10b8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ba:	08 95       	ret

000010bc <__fp_split3>:
    10bc:	57 fd       	sbrc	r21, 7
    10be:	90 58       	subi	r25, 0x80	; 128
    10c0:	44 0f       	add	r20, r20
    10c2:	55 1f       	adc	r21, r21
    10c4:	59 f0       	breq	.+22     	; 0x10dc <__fp_splitA+0x10>
    10c6:	5f 3f       	cpi	r21, 0xFF	; 255
    10c8:	71 f0       	breq	.+28     	; 0x10e6 <__fp_splitA+0x1a>
    10ca:	47 95       	ror	r20

000010cc <__fp_splitA>:
    10cc:	88 0f       	add	r24, r24
    10ce:	97 fb       	bst	r25, 7
    10d0:	99 1f       	adc	r25, r25
    10d2:	61 f0       	breq	.+24     	; 0x10ec <__fp_splitA+0x20>
    10d4:	9f 3f       	cpi	r25, 0xFF	; 255
    10d6:	79 f0       	breq	.+30     	; 0x10f6 <__fp_splitA+0x2a>
    10d8:	87 95       	ror	r24
    10da:	08 95       	ret
    10dc:	12 16       	cp	r1, r18
    10de:	13 06       	cpc	r1, r19
    10e0:	14 06       	cpc	r1, r20
    10e2:	55 1f       	adc	r21, r21
    10e4:	f2 cf       	rjmp	.-28     	; 0x10ca <__fp_split3+0xe>
    10e6:	46 95       	lsr	r20
    10e8:	f1 df       	rcall	.-30     	; 0x10cc <__fp_splitA>
    10ea:	08 c0       	rjmp	.+16     	; 0x10fc <__fp_splitA+0x30>
    10ec:	16 16       	cp	r1, r22
    10ee:	17 06       	cpc	r1, r23
    10f0:	18 06       	cpc	r1, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	f1 cf       	rjmp	.-30     	; 0x10d8 <__fp_splitA+0xc>
    10f6:	86 95       	lsr	r24
    10f8:	71 05       	cpc	r23, r1
    10fa:	61 05       	cpc	r22, r1
    10fc:	08 94       	sec
    10fe:	08 95       	ret

00001100 <__fp_zero>:
    1100:	e8 94       	clt

00001102 <__fp_szero>:
    1102:	bb 27       	eor	r27, r27
    1104:	66 27       	eor	r22, r22
    1106:	77 27       	eor	r23, r23
    1108:	cb 01       	movw	r24, r22
    110a:	97 f9       	bld	r25, 7
    110c:	08 95       	ret

0000110e <__gesf2>:
    110e:	8a df       	rcall	.-236    	; 0x1024 <__fp_cmp>
    1110:	08 f4       	brcc	.+2      	; 0x1114 <__gesf2+0x6>
    1112:	8f ef       	ldi	r24, 0xFF	; 255
    1114:	08 95       	ret

00001116 <__mulsf3>:
    1116:	0b d0       	rcall	.+22     	; 0x112e <__mulsf3x>
    1118:	c0 cf       	rjmp	.-128    	; 0x109a <__fp_round>
    111a:	b1 df       	rcall	.-158    	; 0x107e <__fp_pscA>
    111c:	28 f0       	brcs	.+10     	; 0x1128 <__mulsf3+0x12>
    111e:	b6 df       	rcall	.-148    	; 0x108c <__fp_pscB>
    1120:	18 f0       	brcs	.+6      	; 0x1128 <__mulsf3+0x12>
    1122:	95 23       	and	r25, r21
    1124:	09 f0       	breq	.+2      	; 0x1128 <__mulsf3+0x12>
    1126:	a2 cf       	rjmp	.-188    	; 0x106c <__fp_inf>
    1128:	a7 cf       	rjmp	.-178    	; 0x1078 <__fp_nan>
    112a:	11 24       	eor	r1, r1
    112c:	ea cf       	rjmp	.-44     	; 0x1102 <__fp_szero>

0000112e <__mulsf3x>:
    112e:	c6 df       	rcall	.-116    	; 0x10bc <__fp_split3>
    1130:	a0 f3       	brcs	.-24     	; 0x111a <__mulsf3+0x4>

00001132 <__mulsf3_pse>:
    1132:	95 9f       	mul	r25, r21
    1134:	d1 f3       	breq	.-12     	; 0x112a <__mulsf3+0x14>
    1136:	95 0f       	add	r25, r21
    1138:	50 e0       	ldi	r21, 0x00	; 0
    113a:	55 1f       	adc	r21, r21
    113c:	62 9f       	mul	r22, r18
    113e:	f0 01       	movw	r30, r0
    1140:	72 9f       	mul	r23, r18
    1142:	bb 27       	eor	r27, r27
    1144:	f0 0d       	add	r31, r0
    1146:	b1 1d       	adc	r27, r1
    1148:	63 9f       	mul	r22, r19
    114a:	aa 27       	eor	r26, r26
    114c:	f0 0d       	add	r31, r0
    114e:	b1 1d       	adc	r27, r1
    1150:	aa 1f       	adc	r26, r26
    1152:	64 9f       	mul	r22, r20
    1154:	66 27       	eor	r22, r22
    1156:	b0 0d       	add	r27, r0
    1158:	a1 1d       	adc	r26, r1
    115a:	66 1f       	adc	r22, r22
    115c:	82 9f       	mul	r24, r18
    115e:	22 27       	eor	r18, r18
    1160:	b0 0d       	add	r27, r0
    1162:	a1 1d       	adc	r26, r1
    1164:	62 1f       	adc	r22, r18
    1166:	73 9f       	mul	r23, r19
    1168:	b0 0d       	add	r27, r0
    116a:	a1 1d       	adc	r26, r1
    116c:	62 1f       	adc	r22, r18
    116e:	83 9f       	mul	r24, r19
    1170:	a0 0d       	add	r26, r0
    1172:	61 1d       	adc	r22, r1
    1174:	22 1f       	adc	r18, r18
    1176:	74 9f       	mul	r23, r20
    1178:	33 27       	eor	r19, r19
    117a:	a0 0d       	add	r26, r0
    117c:	61 1d       	adc	r22, r1
    117e:	23 1f       	adc	r18, r19
    1180:	84 9f       	mul	r24, r20
    1182:	60 0d       	add	r22, r0
    1184:	21 1d       	adc	r18, r1
    1186:	82 2f       	mov	r24, r18
    1188:	76 2f       	mov	r23, r22
    118a:	6a 2f       	mov	r22, r26
    118c:	11 24       	eor	r1, r1
    118e:	9f 57       	subi	r25, 0x7F	; 127
    1190:	50 40       	sbci	r21, 0x00	; 0
    1192:	8a f0       	brmi	.+34     	; 0x11b6 <__mulsf3_pse+0x84>
    1194:	e1 f0       	breq	.+56     	; 0x11ce <__mulsf3_pse+0x9c>
    1196:	88 23       	and	r24, r24
    1198:	4a f0       	brmi	.+18     	; 0x11ac <__mulsf3_pse+0x7a>
    119a:	ee 0f       	add	r30, r30
    119c:	ff 1f       	adc	r31, r31
    119e:	bb 1f       	adc	r27, r27
    11a0:	66 1f       	adc	r22, r22
    11a2:	77 1f       	adc	r23, r23
    11a4:	88 1f       	adc	r24, r24
    11a6:	91 50       	subi	r25, 0x01	; 1
    11a8:	50 40       	sbci	r21, 0x00	; 0
    11aa:	a9 f7       	brne	.-22     	; 0x1196 <__mulsf3_pse+0x64>
    11ac:	9e 3f       	cpi	r25, 0xFE	; 254
    11ae:	51 05       	cpc	r21, r1
    11b0:	70 f0       	brcs	.+28     	; 0x11ce <__mulsf3_pse+0x9c>
    11b2:	5c cf       	rjmp	.-328    	; 0x106c <__fp_inf>
    11b4:	a6 cf       	rjmp	.-180    	; 0x1102 <__fp_szero>
    11b6:	5f 3f       	cpi	r21, 0xFF	; 255
    11b8:	ec f3       	brlt	.-6      	; 0x11b4 <__mulsf3_pse+0x82>
    11ba:	98 3e       	cpi	r25, 0xE8	; 232
    11bc:	dc f3       	brlt	.-10     	; 0x11b4 <__mulsf3_pse+0x82>
    11be:	86 95       	lsr	r24
    11c0:	77 95       	ror	r23
    11c2:	67 95       	ror	r22
    11c4:	b7 95       	ror	r27
    11c6:	f7 95       	ror	r31
    11c8:	e7 95       	ror	r30
    11ca:	9f 5f       	subi	r25, 0xFF	; 255
    11cc:	c1 f7       	brne	.-16     	; 0x11be <__mulsf3_pse+0x8c>
    11ce:	fe 2b       	or	r31, r30
    11d0:	88 0f       	add	r24, r24
    11d2:	91 1d       	adc	r25, r1
    11d4:	96 95       	lsr	r25
    11d6:	87 95       	ror	r24
    11d8:	97 f9       	bld	r25, 7
    11da:	08 95       	ret

000011dc <_exit>:
    11dc:	f8 94       	cli

000011de <__stop_program>:
    11de:	ff cf       	rjmp	.-2      	; 0x11de <__stop_program>
